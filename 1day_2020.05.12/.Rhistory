# 컴퓨터 프로그램은 알고리즘에 기반으로 기억장소 원리와
#                   순차/선택/반복 구조를 조합하여 작성한다.
#
# 선택 구조 종류
#  - 단순 선택 구조
#  - 양자 선택 구조
#  - 다중 선택 구조
#  - 중첩 선택 구조
#
# 1. 단순 선택 구조
job.type <- 'B'
bonus <- 0
if ( job.type == 'A') {
bonus <- 200
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 컴퓨터 프로그램은 알고리즘에 기반으로 기억장소 원리와
#                   순차/선택/반복 구조를 조합하여 작성한다.
#
# 선택 구조 종류
#  - 단순 선택 구조
#  - 양자 선택 구조
#  - 다중 선택 구조
#  - 중첩 선택 구조
#
# 1. 단순 선택 구조
job.type <- 'A'
bonus <- 0
if ( job.type == 'A') {
bonus <- 200
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
cat( 'job type : ', job.type, '\tbonus', bonus )
# 양자 택일 구조
job.type <- 'B'
bonus <- 0
if ( job.type == 'A') {
bonus <- 200
} else {
bonus <- 100
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 양자 택일 구조
job.type <- 'B'
if ( job.type == 'A') {
bonus <- 200
} else {
bonus <- 100
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 양자 택일 구조
job.type <- 'B'
if ( job.type == 'A') {
bonus <- 200
} else {
bonus <- 100
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 양자 택일 구조
job.type <- 'A'
if ( job.type == 'A') {
bonus <- 200
} else {
bonus <- 100
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 3. 다중 선택 구조
score <- 85
if ( score >= 90 ) {
grade <- 'A'
} else if ( score >= 80 ) {
grade <- 'B'
} else if ( score >= 70 ) {
grade <- 'C'
} else if ( score >= 60 ) {
grade <- 'D'
} else {
grade <- 'F'
}
cat( 'score : ', score, '\t\tgrade : ', grade)
score <- 50
if ( score >= 90 ) {
grade <- 'A'
} else if ( score >= 80 ) {
grade <- 'B'
} else if ( score >= 70 ) {
grade <- 'C'
} else if ( score >= 60 ) {
grade <- 'D'
} else {
grade <- 'F'
}
cat( 'score : ', score, '\t\tgrade : ', grade)
# 4. 중첩 선택 구조
a <- 2
b <- 1
c <- 3
if ( a > b ) {
if ( a > c ){
if ( b > C ) {
mid <-  b; min <-  c
} else{
mid <-  c; min <-  b
}
} else if ( c > b ) {
max <- c; mid <- a; min <- b
}
} else if ( b > c ) {
max <- b
if ( a > C ) {
mid <- a; min <- c
} else {
mid <- c; min <- a
}
}
cat( 'max ; ', max, '\tmid : ', mid, '\tmin : ', min)
cat( 'max : ', max, '\tmid : ', mid, '\tmin : ', min)
number <- 10
remainder <- number %% 2
if( reminder == 0 ) {
oddeven <- '짝수'
} else {
oddeven <- '홀수'
}
if( remainder == 0 ) {
oddeven <- '짝수'
} else {
oddeven <- '홀수'
}
cat( 'number : ', number, '는 ', oddeven, ' 이다.')
cat( 'number : ', number, '는 ', oddeven, '이다.')
a <- 5
b <- 20
if ( a > 5 & b > 5 ) {
cat ( a, ' > 5 and ', b, ' >5' )
} else {
cat ( a, ' <= 5 or ', b, ' <= 5' )
}
a <- 8; b <- 5; c <- 10; max <- a
if (b > max ) {
max <- b
}
if( c > max ) {
max <- c
}
cat( 'a = ', a, 'b = ', b, 'c = ', c, 'max = ', max )
a <- 8; b <- 5; c <- 10; min <- a
if (b < min ) {
min <- b
}
if( c < min ) {
min <- c
}
cat( 'a = ', a, 'b = ', b, 'c = ', c, 'max = ', max )
a <- 8; b <- 5; c <- 10; min <- a
if (b < min ) {
min <- b
}
if( c < min ) {
min <- c
}
cat( 'a = ', a, 'b = ', b, 'c = ', c, 'min = ', min )
a <- 5
b <- 20
if ( a > 5 & b > 5 ) {
cat ( a, ' > 5 and ', b, ' >5' )
} else {
cat ( a, ' <= 5 or ', b, ' <= 5' )
}
cat( 'a = ', a, 'b = ', b, 'c = ', c, 'min = ', min )
a <- 8; b <- 5; c <- 10; min <- a
if ( b < min ) { min <- b }
if ( c < min ) { min <- c }
cat( 'a = ', a, 'b = ', b, 'c = ', c, 'min = ', min )
# 입력 : input number1 : [ 10 ]
#      : input number2 : [ 5 ]
#
# 출력결과 : 10 + 5  = 15
#            10 - 5  = 5
#            10 * 5  = 50
#            10 / 5  = 2
#            10 %% 5 = 0
#
#
number1 <- readline( 'input number : ' )   # readline() : 문자 형태로 저장(숫자 X)
# 문제 : 하나의 숫자를 입력받아 짝수있지 홀수 인지 출력
readline( 'input number : ' )
#---------------(실습문제)----------------------
# 문제 : 하나의 숫자를 입력받아 짝수있지 홀수 인지 출력
as.numeric( readline( 'input number : ' ) )
#---------------(실습문제)----------------------
# 문제 : 하나의 숫자를 입력받아 짝수있지 홀수 인지 출력
odd <- as.numeric( readline( 'input number : ' ) )
if ( odd %% 2 == 0 ) { cat( odd, ' 는 짝수입니다.')} else {cat( odd, ' 는 홀수입니다.')}
if ( odd %% 2 == 0 ) { cat( odd, ' 은/는 짝수입니다.')}
if ( odd %% 2 == 0 ) { cat( odd, ' 은/는 짝수입니다.')}
else {cat( odd, ' 는 홀수입니다.')}
#---------------(실습문제2)----------------------
# 문제 : 하나의 숫자를 입력받아 3의 배수이면 '3의 배수'
#        5의 배수이면 '5의 배수'
#        3, 5의 배수가 아니면 '3, 5의 배수가 아닙니다.' 출력
number35 <- as.numeric( readline( 'input number : ' ) )
if ( number35 %% 3 == 0 ) {
cat( number35, ' 은/는 3의 배수입니다.' )
} else if( number35 %% 5 == 0 ){
cat( number35, ' 은/는 5의 배수입니다.' )
} else { cat( number35, ' 는 3, 5의 배수가 아닙니다.' ) }
#---------------(실습문제2)----------------------
# 문제 : 하나의 숫자를 입력받아 3의 배수이면 '3의 배수'
#        5의 배수이면 '5의 배수'
#        3, 5의 배수가 아니면 '3, 5의 배수가 아닙니다.' 출력
number35 <- as.numeric( readline( 'input number : ' ) )
if ( number35 %% 3 == 0 ) {
cat( number35, ' 은/는 3의 배수입니다.' )
} else if( number35 %% 5 == 0 ){
cat( number35, ' 은/는 5의 배수입니다.' )
} else { cat( number35, ' 는 3, 5의 배수가 아닙니다.' ) }
#
# 2.3 반복 구조
#
# 반복 구조 : 조건이 만족하는 동안 동일한 내용을 반복 수행
#
# 1. 반복 횟수가 정해진 경우 : for
# 2. 반복 횟수가 정해지지 않은 경우 : while
#
# for문 : for ([반복제어변수] in [반복 범위]) {}
for ( i in 1:10 ) {
print( '*' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
}
multiple = 2
for ( i, in 2:9 ) {
cat( multiple, ' * ', i, ' = ', multiple * i, '\n' )
}
multiple = 2
for ( i in 2:9 ) {
cat( multiple, ' * ', i, ' = ', multiple * i, '\n' )
}
# (방법2)
number35 <- as.numeric( readline( 'input number : ' ) )
multiple3 = number35 %% 3 == 0
multiple5 = number35 %% 5 == 0
if ( multiple3 ) { cat( number35, ' 은/는 3의 배수입니다.' ) } else if ( multiple5 ) { cat( number35, ' 은/는 5의 배수입니다.' } else {
# (방법2) ------------------------------ 다시해볼것!!!!!!!!!!
number35 <- as.numeric( readline( 'input number : ' ) )
multiple3 = number35 %% 3 == 0
multiple5 = number35 %% 5 == 0
if ( multiple3 ) { cat( number35, ' 은/는 3의 배수입니다.' ) } else if ( multiple5 ) { cat( number35, ' 은/는 5의 배수입니다.' } else {
for ( i in 2:9 ) {
cat( multiple, ' * ', i, ' = ', multiple * i, '\n' )
}
for ( i in 2:9 ) {
for ( j in 1:9 ) {
multiple = i * j
cat( multiple, '\t' )
}
}
multiple = 2
for ( i in 2:9 ) {
for ( j in 1:9 ) {
multiple = i * j
cat( multiple, '\t' )
}
}
multiple = 2
for ( i in 2:9 ) {
cat( multiple, ' * ', i, ' = ', multiple * i, '\n' )
}
for ( i in 2:9 ) {
for ( j in 1:9 ) {
multiple = i * j
cat( multiple, '\t' )
}
}
i <-  1 # 반복 제어 변수 초기화
while ( i <= 10 ) { # 반복 제어 변수 조건 검사, 참인동안 반복
print( '*' )
i <- i + 1  #반복 제어 변수 값, 누적
}
while ( i <= 10 ) { # 반복 제어 변수 조건 검사, 참인동안 반복
print( '*' )
i <- i + 2  #반복 제어 변수 값, 누적
}
i <-  1 # 반복 제어 변수 초기화
while ( i <= 10 ) { # 반복 제어 변수 조건 검사, 참인동안 반복
print( '*' )
i <- i + 2  #반복 제어 변수 값, 누적
}
#
# 반복 제어 변수 초기화
# While (반복 제어 변수 조건 검사){
#    반복 제어 변수 값 변경
# }
#
i <-  1 # 반복 제어 변수 초기화
while ( i <= 10 ) { # 반복 제어 변수 조건 검사, 참인동안 반복
print( '*' )
i <- i + 2  #반복 제어 변수 값, 누적
}
i <- 2
while ( i <= 9 ) {
j <- 1
while ( j <= 9 ) {
multiple = i * j
cat( multiple, '\t' )
j <- j + 1
}
i <- i + 1
}
i <- 2
while ( i <= 9 ) {
j <- 1
while ( j <= 9 ) {
multiple = i * j
cat( multiple, '\t' )
j <- j + 1
}
i <- i + 1
}
cat( '\n' )
i <- 2
while ( i <= 9 ) {
j <- 1
while ( j <= 9 ) {
multiple = i * j
cat( multiple, '\t' )
j <- j + 1
}
cat( '\n' )
i <- i + 1
}
multiple = 2
for ( i in 2:9 ) {
cat( multiple, ' * ', i, ' = ', multiple * i, '\n' )
}
for ( i in 2:9 ) {
for ( j in 1:9 ) {
multiple = i * j
cat( multiple, '\t' )
}
}
for ( i in 2:9 ) {
for ( j in 1:9 ) {
multiple = i * j
cat( multiple, '\t' )
}
cat( '\n' )
}
# (방법2) ------------------------------ 다시해볼것!!!!!!!!!!
number35 <- as.numeric( readline( 'input number : ' ) )
number35 <- as.numeric( readline( 'input number : ' ) )
multiple3 = number35 %% 3 == 0
multiple5 = number35 %% 5 == 0
if ( multiple3 ) {
cat( number35, ' 은/는 3의 배수입니다.' )
} else if( multiple5 ) {
cat( number35, ' 은/는 5의 배수입니다.' )
} else { cat( number35, ' 은/는 3, 5의 배수가 아닙니다.' ) }
multiple <- function( x ) {
for ( i in 1:9 ) {
multiple <- x * i
cat( x, ' * ', i, ' = ', multiple, '\n' )
}
# return()
}
multiple <- function( x ) {
for ( i in 1:9 ) {
multiple <- x * i
cat( x, ' * ', i, ' = ', multiple, '\n' )
}
# return()
}
# 함수 호출
multiple( 2 )
mymax <- function( x, y ){
num.max <- x
if ( y > num.max ) {
num.max <- y
}
return( num.max )
}
# 함수 호출
mymax( 5, 6 )
a <- 10; b <- 5; c <- 8
max <- mymax( a, b ); max <- mymax( max, c )
max
myCalc <- function( x, y ){
add <- x + y
sub <- x - y
mul <- x * y
div <- x / y
rem <- x %% y
return( list( ret.add = add, ret.sub = sub, ret.mul = mul,
ret.div = div, ret.rem = rem ) )
}
result <- myCalc( 10, 5)
cat( '10 + 5 = ', result$ret.add, '\n' )
cat( '10 - 5 = ', result$ret.sub, '\n' )
cat( '10 * 5 = ', result$ret.mul, '\n' )
cat( '10 / 5 = ', result$ret.div, '\n' )
cat( '10 %% 5 = ', result$ret.rem, '\n' )
myCalc2 <- function( x, y ){
result <- c( x + y, x - y, x * y, x / y, x %% y )
return( result )
}
myCalc2 <- function( x, y ){
result <- c( x + y, x - y, x * y, x / y, x %% y )
return( result )
}
myCalc2( 10 + 5 )
myCalc2 <- function( x, y ){
result <- c( x + y, x - y, x * y, x / y, x %% y )
return( result )
}
myCalc2( 10, 5 )
# return값이 여러개인 함수
#-------------(list 함수 사용-결과 값이 문자열임)---------------------
myCalc <- function( x, y ){
add <- x + y
sub <- x - y
mul <- x * y
div <- x / y
rem <- x %% y
return( list( ret.add = add, ret.sub = sub, ret.mul = mul,
ret.div = div, ret.rem = rem ) )
}
result <- myCalc( 10, 5)
cat( '10 + 5 = ', result$ret.add, '\n' )
cat( '10 - 5 = ', result$ret.sub, '\n' )
cat( '10 * 5 = ', result$ret.mul, '\n' )
cat( '10 / 5 = ', result$ret.div, '\n' )
cat( '10 %% 5 = ', result$ret.rem, '\n' )
