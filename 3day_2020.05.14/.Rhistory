# 1. 위와 같은 내용의 matrix score를 생성
m <- data.frame( c( 10, 40, 60, 20 ) )
f <- data.frame( c( 21, 60, 70, 30 ) )
score <- data.frame( m, f )
score
# 1. 위와 같은 내용의 matrix score를 생성
m <-c( 10, 40, 60, 20 )
f <- c( 21, 60, 70, 30 )
score <- data.frame( m, f )
score
score <- data.matrix( m, f )
score
score <- data.frame( m, f )
score
# 4. female의 모든 값을 출력
score[ , 2 ]
score[ , 'female' ]
# 2. score의 열 이름을 각각 male,  female로 바꾸시오
colnames( score ) <- c( 'male', 'female' )
score
# 3. 2행에 있는 모든 값을 출력
score[ 2, ]
score[ c( 2 ), ]
# 4. female의 모든 값을 출력
score[ , 2 ]
score[ , 'female' ]
score[ , c( 2 ) ]
# 5. 3행 2열의 값을 출력
score[ 3, 2 ]
# 1. state.x77을 변환하여 st에 data frame으로 작성
View(state.x77)
# 1. state.x77을 변환하여 st에 data frame으로 작성
class(state.x77)
# 1. state.x77을 변환하여 st에 data frame으로 작성
st <- data.frame( state.x77 )
st
class( st )
# 3. st의 열 이름 출력
colnames( st )
names( st )
# 4. st의 행 이름 출력
rownames( st )
# 5. st의 행의 개수와 열의 개수 출력
dim( st )
length( colnames( st ) )
length( names( st ) )
# 5. st의 행의 개수와 열의 개수 출력
dim( st )
length( rownames( st ) )
length( colnames( st ) )
length( names( st ) )
nrow( st )
ncol( st )
# 6. st의 요약 정보 출력
str( st )
# 7. st의 행별 합계와 평균 출력
rowsum( st )
# 7. st의 행별 합계와 평균 출력
rowSums( st )
apply( st, 1, sum )
rowMeans( st )
rowMeans( st )
apply( st, 1, mean )
# 8. st의 열별 합계와 평균 출력
colSums( st )
apply( st, 2, sum )
colMeans( st )
apply( st, 2, mean )
# 9. Florida 주의 모든 정보 출력
st[ 'florida', ]
# 1. state.x77을 변환하여 st에 data frame으로 작성
st <- data.frame( state.x77 )
class( st )
# 9. Florida 주의 모든 정보 출력
st[ 'florida', ]
#9. Florida 주의 모든 정보 출력
st[ 'Florida', ]
# 9. Florida 주의 모든 정보 출력
st[ 'Florida', ]
# 10. 50개 주의 수입(Income) 정보만 출력
st[ , 'Income']
# 11. Texas 주의 면적(Area)을 출력
st[ "Texas", "Area" ]
# 11. Texas 주의 면적(Area)을 출력
st[ "Texas", "Area" ]
#11. Texas 주의 면적(Area)을 출력
st[ 'Texas', 'Area' ]
# 12. Ohio 주의 인구(Population)와 수입(Income) 출력
st[ 'Ohio', c( "Population", "Income" ) ) ]
# 12. Ohio 주의 인구(Population)와 수입(Income) 출력
st[ 'Ohio', c( "Population", "Income" ) ]
# 13. 인구가 5,000 이상인 주의 데이터만 출력
st[ , "Population" >= 5000 ]
#13. 인구가 5,000 이상인 주의 데이터만 출력
subset( st, Population >= 5000 )
subset( st, "Population" >= 5000 )
# 14. 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력
subset( st, 'Income' >= 4500, select = 'Population', 'Income' )
# 14. 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력
subset( st, 'Income' >= 4500, select = 'Population', 'Income', 'Area' )
#14. 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력
subset( st, Income >= 4500, select = c( 'Income','Area' ) ) # 방법1
# 14. 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력
subset( st, Income >= 4500, select = c( 'Population', 'Income', 'Area' ) )
subset( st, Income >= 4500)[ , c( 'Population', 'Income', 'Area' ) ]
subset( st, Income >= 4500)[ , c( 'Population', 'Income', 'Area' ) ]
# 15. 수입이 4,500 이상인 주는 몇 개인지 출력
subset( st, Income >= 4500 )
# 15. 수입이 4,500 이상인 주는 몇 개인지 출력
rownames( subset( st, Income >= 4500 ) )
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset( st, Area >= 100000 & Frost >= 120 )
# 17. 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12미만인 주의 정보 출력
subset( st, Population < 2000 & Murder < 12 )
# 14. 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력
subset( st, Income >= 4500, select = c( 'Population', 'Income', 'Area' ) )
# 18. 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력
rowMeans( subset( st, Illiteracy >= 2.0)[ , 'Income'] )
# 18. 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력
rowMeans( subset( st, Illiteracy >= 2.0) $ income )
# 18. 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력
rowMeans( subset( st, Illiteracy >= 2.0)$income )
# 18. 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력
mean( subset( st, Illiteracy >= 2.0)$income )
# 18. 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력
mean( subset( st, Illiteracy >= 2.0)$Income )
Ill_in <- Ill$Income
# 18. 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력
Ill <- subset( st, Illiteracy >= 2.0)
Ill_in <- Ill$Income
mean(Ill_in )
#
# 2.1 List
#
# List : 동일 자료형, 다른 자료형을 저장할 수 있는 벡터
#
# list() : List 생성함수
#          요소는 key(이름) = value(값) 형식이다.
v <- c( 90, 85, 70 ,84 )
l <- list( name = 'hong', age = 30, status = TRUE, score = v )
l
l$name
# 19. 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이 출력
Ill_up <- subset( st, Illiteracy >= 2.0)
Ill_down <- bset( st, Illiteracy < 2.0)
Ill_down <- subset( st, Illiteracy < 2.0)
mean( Ill_up ) - mean( Ill_down )
# 19. 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이 출력
Ill_up <- subset( st, Illiteracy >= 2.0)
Ill_up$Income
Ill_down <- subset( st, Illiteracy < 2.0)
Ill_down$Income
mean( Ill_up$Income ) - mean( Ill_down$Income )
abs( mean( Ill_up$Income ) - mean( Ill_down$Income ) )
Ill_down_in <- Ill_down$Income
# 19. 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이 출력
Ill_up <- subset( st, Illiteracy >= 2.0)
Ill_up_in <- Ill_up$Income
Ill_down <- subset( st, Illiteracy < 2.0)
Ill_down_in <- Ill_down$Income
abs( mean( Ill_up$Income ) - mean( Ill_down$Income ) )
abs( mean( Ill_up_in ) - mean( Ill_down_in ) )
Ill_up <- subset( st, Illiteracy >= 2.0)$Income
Ill_down <- subset( st, Illiteracy < 2.0)$Income
abs( mean( Ill_up ) - mean( Ill_down ) )
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
subset( st, Life Exp = max )
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
subset( st, Life Exp == max )
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
rownames( subset( st, Life Exp == max ) )
mean( subset( st, Illiteracy >= 2.0)$Income ) - mean( Ill_down <- subset( st, Illiteracy < 2.0)$Income )
abs( mean( subset( st, Illiteracy >= 2.0)$Income ) - mean( Ill_down <- subset( st, Illiteracy < 2.0)$Income ) )
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
rownames( subset( st, Life Exp == max( st$Life Exp ) ) )
max( st$Life.Exp )
max( st$Life.Exp )
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
rownames( subset( st, Life.Exp == max( st$Life.Exp ) ) )
max.life <- max( st$Life.Exp )
rownames( subset( st, Life.Exp == max.life ) )
# 1. state.x77을 변환하여 st에 data frame으로 작성
st <- data.frame( state.x77 )
# 2. st의 내용을 출력
st
# 21 Pennsylvania 주보다 수입(Income)이 높은 주들 출력
PmoreIn <- subset( st, Income > Pennsylvania$Income )
# 21 Pennsylvania 주보다 수입(Income)이 높은 주들 출력
PmoreIn <- subset( st, Income > Pennsylvania$Income )
# 21 Pennsylvania 주보다 수입(Income)이 높은 주들 출력
PIn <- ['Pennsylvania', 'Income' ]
PIn
# 21 Pennsylvania 주보다 수입(Income)이 높은 주들 출력
PIn <- ['Pennsylvania', 'Income' ]
# 21 Pennsylvania 주보다 수입(Income)이 높은 주들 출력
PIn <- [ 'Pennsylvania', 'Income' ]
# 21 Pennsylvania 주보다 수입(Income)이 높은 주들 출력
PIn <- st[ 'Pennsylvania', 'Income' ]
PIn
rownames( subset( st, Income > PIn ) )
rownames( subset( st, st[ 'Pennsylvania', 'Income' ] ) )
rownames( subset( st, Income > Pennsylvania$Income ) )
rownames( subset( st, Income > 'Pennsylvania'$Income ) )
rownames( subset( st, Income > 'Pennsylvania'$'Income' ) )
# 2. st의 내용을 출력
st
# 1. 이 데이터셋의 자료구조 출력
data( mtcars )
# 1. 이 데이터셋의 자료구조 출력
str( mtcars )
# 1. 이 데이터셋의 자료구조 출력
class( mtcars )
# 2. 이 데이터셋의 행의 개수와 열의 개수 출력
dim( mtcars )
# 3. 이 데이터셋 열들의 자료형 출력
str( mtcars )
View( mtcars )
# 2. 이 데이터셋의 행의 개수와 열의 개수 출력
dim( mtcars )
# 4. 연비(mpg)가 가장 좋은 자동차 모델 출력
rownames( subset( mtcars, mpg == max ))
# 4. 연비(mpg)가 가장 좋은 자동차 모델 출력
rownames( subset( mtcars, mpg == max( mtcars$mpg ) ) )
# 4. 연비(mpg)가 가장 좋은 자동차 모델 출력
max.mpg <- subset( max( mtcars$mpg ) )
# 4. 연비(mpg)가 가장 좋은 자동차 모델 출력
max.mpg <- max( mtcars$mpg )
rownames( mtcars[ mtcars$mpg == max.mpg, ] )
rownames( subset( mtcars, mpg == max.mpg ) ) # 방법 2
rownames( subset( mtcars, mpg == max.mpg ) )
rownames( subset( mtcars, mpg == max( mtcars$mpg ) ) )
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
g4 <- mtcars[ mtcars$gear == 4]
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg']
rownames( subset( mtcars, min.mpg ) )
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg']
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg']
rownames( subset( mtcars, mpg == min.mpg ) )
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg']
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg'] )
rownames( subset( mtcars, mpg == min.mpg ) )
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg'] )
rownames( subset( mtcars, mpg == min.mpg ) )
rownames( mtcars[ mtcar$gear == min.mpg] )
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg'] )
rownames( mtcars[ mtcar$gear == min.mpg] )
rownames( mtcars[ mtcar$gear == min.mpg, ] )
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg'] )
rownames( mtcars[ mtcar$gear == min.mpg, ] )
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg' ] )
rownames( mtcars[ mtcars$mpg == min.mpg, ] ) # 방법 1
rownames( subset( mtcars, mpg == min.mpg ) ) # 방법 2
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg'] )
rownames( mtcars[ mtcar$gear == min.mpg, ] )
rownames( mtcars[ mtcars$mpg == min.mpg, ] )
rownames( mtcars[ mtcar$gear == min.mpg, ] )
rownames( mtcars[ mtcar$gear == min.mpg, ] )
rownames( mtcars[ mtcars$gear == min.mpg, ] )
rownames( mtcars[ mtcars$mpg == min.mpg, ] )
# 6. Honda Civic의 연비(mpg)와 gear 수 출력
mtcars[ 'Honda Civic', c( 'mpg', 'gear' ) ]
# 7. Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
pon <- mtcars [ 'Pontiac Firebird', 'mpg' ]
subset( mtcars, mpg > pon )
rownames( subset( mtcars, mpg > pon ) )
rownames( mtcars[ mtcars$mpg > pon ] )
rownames( mtcars[ mtcars$mpg > pon, ] )
# 8. 자동차 모델들의 평균 연비 출력
rowMeans( mtcars$mpg )
# 8. 자동차 모델들의 평균 연비 출력
Means( mtcars$mpg )
# 8. 자동차 모델들의 평균 연비 출력
colMeans( mtcars$mpg )
# 8. 자동차 모델들의 평균 연비 출력
Means( mtcars$mpg )
# 8. 자동차 모델들의 평균 연비 출력
mean( mtcars$mpg )
#8. 자동차 모델들의 평균 연비 출력
mean( mtcars$mpg )
# 9. gear의 수 종류 출력
levels( mtcars$mpg )
# 9. gear의 수 종류 출력
lebgth( levels( mtcars$mpg ) )
# 9. gear의 수 종류 출력
length( levels( mtcars$mpg ) )
# 9. gear의 수 종류 출력
length( rownames(mtcars) )
# 9. gear의 수 종류 출력
length( (mtcars$gear) )
# 9. gear의 수 종류 출력
length( (mtcars$gear) )
# 9. gear의 수 종류 출력
length( mtcars$gear )
unique( mtcars$gear )
#9. gear의 수 종류 출력
unique(mtcars$gear)
# 9. gear의 수 종류 출력
unique( mtcars$gear )
# 표준 출력 장치에 출력
#
# print() : 하나만 출력 가능하고, 자동 줄바꿈('\n', 자동 개행)
numberValue; print( numberValue )
# 1. Review
#
# 변수명 / 표준입력 / 표준출력
#
# 변수명 부여방식
numberValue <- 1                   # camael 표기법
str_value <- "R Language"          # snake 표기법
booleanvalue <- TRUE               # 일반 표기법     (이건 쓰지말자 헷갈린다.)
# 표준 출력 장치에 출력
#
# print() : 하나만 출력 가능하고, 자동 줄바꿈('\n', 자동 개행)
numberValue; print( numberValue )
str_value; print( str_value )
booleanvalue; print( booleanvalue )
a'\t'b
# cat() : 여러 내용을 출력할 수 있고, 자동 줄바꿈이 일어나지 않는 표준 출력장치에 출력하는 함수
#
# 제어 문자 : 화면에 출력되지 않고, 기능을 수행하는 문자
#           : 모든 언어 프로그램이 제어문자는 비슷하다.
# '\n' : 개행 문자(줄바꿈)           (무조건 작은따옴표 안에 작성해야 한다.)
# '\t' : tab 문자 (4칸?? 띄워쓰기)   (무조건 작은따옴표 안에 작성해야 한다.)
#
cat( 'String : ', str_value, '\n' )
cat( 'Boolean value : ', booleanvalue, '\n' )
print( '------------------------------------' )
cat( 'Numeric number : ', numberValue, '\t',
'String : ', str_value, '\t',
'Boolean value : ', booleanvalue, '\n') # <- \n을 지운 후 아랫줄 cat( 'test' )와 함께 실행해 볼
cat( 'test' )
cat( 'Numeric number : ', numberValue, '\t',
'String : ', str_value, '\t',
'Boolean value : ', booleanvalue) # <- \n을 지운 후 아랫줄 cat( 'test' )와 함께 실행해 볼
cat( 'test' )
cat( 'Numeric number : ', numberValue, '\n' ,
'String : ', str_value, '\n' ,
'Boolean value : ', booleanvalue, '\n' ) # <- \n을 지운 후 아랫줄 cat( 'test' )와 함께 실행해 볼rjt
cat( 'Numeric number : ', numberValue, '\n' ,
'String : ', str_value, '\n' ,
'Boolean value : ', booleanvalue, '\n' ) # <- \n을 지운 후 아랫줄 cat( 'test' )와 함께 실행해 볼rjt
cat( 'Numeric number : ', numberValue, '\t' ,
'String : ', str_value, '\t' ,
'Boolean value : ', booleanvalue, '\n' ) # <- \n을 지운 후 아랫줄 cat( 'test' )와 함께 실행해 볼rjt
inputData <- scan()   # scan()는 빈줄이 입력될때까지 숫자만 입력 가능 (문자입력X)
inputData
inputData <- scan()   # scan()는 빈줄이 입력될때까지 숫자만 입력 가능 (문자입력X)
inputData <- scan()   # scan()는 빈줄이 입력될때까지 숫자만 입력 가능 (문자입력X)
class( inputData )
inputData
inputData <- scan( what = character() )
class( inputData )
inputData
inputData <- readline( 'input data -> ' )
inputData
inputData <- readline( 'input data -> ' )
class( inputData )
inputData
inputData <- readline( 'input data -> ' )
class( inputData )
inputData <- scan( what = character() )
result <- number1 + number2
number1 <- readline( 'input number : ' )
number1 <- readline( 'input number : ' )
result <- number1 + number2
result
number1 <- readline( 'input number : ' )
number2 <- readline( 'input number : ' )
result <- number1 + number2
result
# (방법1)
number1 <- readline( 'input number : ' )
number2 <- readline( 'input number : ' )
result <- as.numeric(number1) + as.numeric(number2)
# result <- as.integer(number1) + as.integer(number2)
result
# (방법2) as.integer / as numeric 함수로 변환
as.numeric(number1) + as.numeric(number2)
asd <- readline( 'input number1 => ')
zxc <- readline( 'input number2 => ')
cat <- ( '10 + 5 = ', as.numeric( asd ) + as.numeric( zxc ),
'10 - 5 = ', as.numeric( asd ) - as.numeric( zxc ),
'10 * 5 = ', as.numeric( asd ) * as.numeric( zxc ),
'10 / 5 = ', as.numeric( asd ) / as.numeric( zxc ),
'10 %% 5 = ', as.numeric( asd ) %% as.numeric( zxc ) )
cat <- ( '10 + 5 = ', as.numeric( asd ) + as.numeric( zxc ), '\n',
'10 - 5 = ', as.numeric( asd ) - as.numeric( zxc ), '\n',
'10 * 5 = ', as.numeric( asd ) * as.numeric( zxc ), '\n',
'10 / 5 = ', as.numeric( asd ) / as.numeric( zxc ), '\n',
'10 %% 5 = ', as.numeric( asd ) %% as.numeric( zxc ), '\n')
asd <- readline( 'input number1 => ')
zxc <- readline( 'input number2 => ')
cat <- ( '10 + 5 = ', as.numeric( asd ) + as.numeric( zxc ), '\n',
'10 - 5 = ', as.numeric( asd ) - as.numeric( zxc ), '\n',
'10 * 5 = ', as.numeric( asd ) * as.numeric( zxc ), '\n',
'10 / 5 = ', as.numeric( asd ) / as.numeric( zxc ), '\n',
'10 %% 5 = ', as.numeric( asd ) %% as.numeric( zxc ), '\n')
cat <- ( '10 + 5 = ', as.numeric( asd ) + as.numeric( zxc ), '\n',
'10 - 5 = ', as.numeric( asd ) - as.numeric( zxc ), '\n',
'10 * 5 = ', as.numeric( asd ) * as.numeric( zxc ), '\n',
'10 / 5 = ', as.numeric( asd ) / as.numeric( zxc ), '\n',
'10 %% 5 = ', as.numeric( asd ) %% as.numeric( zxc ), '\n')
cat( '10 + 5 = ', as.numeric( asd ) + as.numeric( zxc ), '\n',
'10 - 5 = ', as.numeric( asd ) - as.numeric( zxc ), '\n',
'10 * 5 = ', as.numeric( asd ) * as.numeric( zxc ), '\n',
'10 / 5 = ', as.numeric( asd ) / as.numeric( zxc ), '\n',
'10 %% 5 = ', as.numeric( asd ) %% as.numeric( zxc ), '\n')
# 컴퓨터 프로그램은 알고리즘에 기반으로 기억장소 원리와
#                   순차/선택/반복 구조를 조합하여 작성한다.
#
# 선택 구조 종류
#  - 단순 선택 구조
#  - 양자 선택 구조
#  - 다중 선택 구조
#  - 중첩 선택 구조
#
# 1. 단순 선택 구조
job.type <- 'B'
bonus <- 0
if ( job.type == 'A') {
bonus <- 200
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 컴퓨터 프로그램은 알고리즘에 기반으로 기억장소 원리와
#                   순차/선택/반복 구조를 조합하여 작성한다.
#
# 선택 구조 종류
#  - 단순 선택 구조
#  - 양자 선택 구조
#  - 다중 선택 구조
#  - 중첩 선택 구조
#
# 1. 단순 선택 구조
job.type <- 'A'
bonus <- 0
if ( job.type == 'A') {
bonus <- 200
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 2. 양자 택일 구조
job.type <- 'B'
bonus <- 0
if ( job.type == 'A') {
bonus <- 200
} else {
bonus <- 100
}
cat( 'job type : ', job.type, '\t\tbonus', bonus )
# 3. 다중 선택 구조
#    : 여러 조건 중 만족하는 결과를 출력
score <- 50
if ( score >= 90 ) {
grade <- 'A'
} else if ( score >= 80 ) {
grade <- 'B'
} else if ( score >= 70 ) {
grade <- 'C'
} else if ( score >= 60 ) {
grade <- 'D'
} else {
grade <- 'F'
}
cat( 'score : ', score, '\t\tgrade : ', grade)
number <- 10
remainder <- number %% 2
if( remainder == 0 ) {
oddeven <- '짝수'
} else {
oddeven <- '홀수'
}
cat( 'number : ', number, '는 ', oddeven, '이다.')
a <- 5
b <- 20
if ( a > 5 & b > 5 ) {
cat ( a, ' > 5 and ', b, ' >5' )
} else {
cat ( a, ' <= 5 or ', b, ' <= 5' )
}
a <- 5
b <- 20
if ( a > 5 & b > 5 ) {
cat ( a, ' > 5 and ', b, ' > 5' )
} else {
cat ( a, ' <= 5 or ', b, ' > 5' )
}
a <- 5
b <- 4
if ( a > 5 & b > 5 ) {
cat ( a, ' > 5 and ', b, ' > 5' )
} else {
cat ( a, ' <= 5 or ', b, ' > 5' )
}
b <- 20
if ( a > 5 & b > 5 ) {
cat ( a, ' > 5 and ', b, ' > 5' )
} else {
cat ( a, ' <= 5 or ', b, ' > 5' )
}
#---------------(실습문제1)----------------------
# 문제 : 하나의 숫자를 입력받아 짝수있지 홀수 인지 출력
odd <- as.numeric( readline( 'input number : ' ) )
if ( odd %% 2 == 0 ) { cat( odd, ' 은/는 짝수입니다.')} else {cat( odd, ' 는 홀수입니다.')}
