library( mice )
mean( is.na( x ) )
#
# 매트릭스와 데이터프레임 결측치 처리
#
x <- iris
x[ 1, 2 ] <- NA
x[ 1, 3 ] <- NA
x[ 2, 3 ] <- NA
x[ 3, 4 ] <- NA
head( x )
mean( is.na( x ) )
mean( is.na( iris ) )
resilt <- md.pattern( x )
result
result <- md.pattern( x )
# apply( ) 함수 이용
col_na <- function( y ) {
return( sum( is.na( y ) ) )
}
result <- md.pattern( x )
result
write.csv( result. "md_iris.cvs", row.names = T )
write.csv( result, "md_iris.cvs", row.names = T )
write.csv( result, "md_iris.csv", row.names = T )
md.pattern( iris )
#
# 매트릭스와 데이터프레임 결측치 처리
#
x <- iris
x[ 1, 2 ] <- NA
x[ 1, 3 ] <- NA
x[ 2, 3 ] <- NA
x[ 3, 4 ] <- NA
md.pattern( x )
is.na( x )
result.cor <- as.data.frame( abs( is.na( x ) ) )
result.cor
result.cor.final <- result.cor[ which( apply( result.cor, 2, sum ) > 0 ) ]
result.cor.final
result.cor.final <- result.cor[ which( apply( result.cor, 2, sum ) > 0 ) ]
# apply( ) 함수 이용
col_na <- function( y ) {
return( sum( is.na( y ) ) )
}
result.cor.final
cor( result.cor.final )
abs( is.na( x )
abs( is.na( x ))
abs( is.na( x ) )
is.na( x )
abs( is.na( x ) )
as.integer( is.na( x ) )
# 결측치 탐색을 위한 상관관계 분석
result.cor <- as.data.frame( abs( is.na( x ) ) )
result.cor
result.cor.final <- result.cor[ which( apply( result.cor, 2, sum ) > 0 ) ]
cor( result.cor.final )
result.cor
result.cor.full <- cor( result.cor,
result.cor.final,
use = 'pairwise.complete.obs')
result.cor.full <- cor( result.cor,
result.cor.final,
use = 'pairwise.complete.obs')
# 결측치 탐색을 위한 상관관계 분석
result.cor <- as.data.frame( abs( is.na( x ) ) )
result.cor
result.cor.final <- result.cor[ which( apply( result.cor, 2, sum ) > 0 ) ]
cor( result.cor.final )
result.cor.full <- cor( result.cor,
result.cor.final,
use = 'pairwise.complete.obs')
result.cor.full
# data frame의 결측치 제거
head( x )
# data frame의 결측치 제거
#   - complete.cases( ) : data set에서 NA를 포함하지 않은 완전한(complete) 행을 찾는 함수
head( x )
x[ !complete.cases( x ), ]
y <- x[ complete.cases( x ), ]
head( y )
# 벡터(vector)에 대한 결측치 처리
#
# R에서는 결측치를 NA로 표기
# NA는 숫자형, 문자형, 논리형, 값 어디에나 결측치를 나타내는 용도로 사용
#
# 결측치 특성과 존재 여부 확인
z <- c( 1, 2, 3, NA, 5, NA, 8 )
sum( z )                       # data에 NA가 한 개라도 존재하면 연산이 되지 않는다.
is.na( z )                     # NA 여부 확인
sum( is.na( z ) )              # NA 갯수 확인
na.rm = TRUE
sum( z, na.rm = TRUE )         # NA를 제외한 합계 계산
# 결측치 대체 제거 및 제거
z1 <- c( 1, 2, 3, NA, NA, 8 )
z2 <- c( 5, 8, 1, NA, 3, NA, 7 )
is.na( z1 )
boxplot( st$income )
# 상자그래프를 이용한 특이값 찾기
st <- data.frame( state.x77 )
boxplot( st$income )
# 상자그래프를 이용한 특이값 찾기
st <- data.frame( state.x77 )
boxplot( st$income )
boxplot( st$Income )
boxplot.stats( st$income )$out
boxplot.stats( st$Income )$out
out.val <- boxplot.stats( st$Income )$out     # 특이값 검출
st$Income[ st$Income %in% out.val] <- NA      # NA로 대체 ( %in% -> 벡터에서 포함 데이터 검색하라!)
head( st )
newdata <- st[ complete.cases( st ), ]        # NA 포함행 제거
head( newdata )
# 2.4 데이터 가공
#
# 데이터 가공( processing ) : 수집한 데이터에 대하여 분석을 용이하게 하기 위한 정렬, 집계, 병합 등과 관련한 작업
#
# 정렬( sort ) : 데이터를 주어진 기준에 따라 크기순으로 재배열하는 과정
#                데이터 분석시 빈번히 수행하는 과정
# order( ) : 주어진 열의 값들에 대한 순서를 붙이는 함수
#            값의 크기를 기준으로 작은값부터 시작해서 번호 부여
v1 <- c( 1, 7, 6, 8, 4, 2, 3 )
order( v1 )
v1 <- sort( v1 )
v1
v2 <- sort( v1, decreasing = T )
v2
head( iris )
order( iris$Sepal.Length )
iris[ order( iris$Sepal.Length ), ]
head( iris )
order( iris$Sepal.Length )
iris[ order( iris$Sepal.Length ), ]
iris[ ,order( iris$Sepal.Length ) ]
iris[ ,order( iris$Sepal.Length ) ]
iris[ order( iris$Sepal.Length ), ]
iris[ order( iris$Sepal.Length ), ]
iris[ order( iris$Sepal.Length, decreasing = T ), ]
iris.new <- iris( order( iris$Sepal.Length ), )
head( iris.new )
iris.new <- iris( order( iris$Sepal.Length ), )
iris.new <- iris( order( iris$Sepal.Length ), )
iris.new <- iris( order( iris$Sepal.Length ), )
iris.new <- iris( order( iris$Sepal.Length ), )
head( iris.new )
iris[ order( iris$Sepal.Length, decreasing = T, iris$Petal.Length ), ]
#
# 2. 데이터 분리와 선택
#
# split( ) : 하나의 data set을 열의 값을 기준으로 여러 개의 data set으로 분리
# subset( ) : data set으로부터 조건에 맞는 행들을 추출
#
# 데이터 분리
sp <- split( iris, iris$Species )
sp
summary( sp )
sp$setosa
summary( sp )    # 원래는 4분위수를 구할때 사용하기도 한다.
iris( order( iris$Sepal.Length )
iris( order( iris$Sepal.Length )
# data 선택
subset( iris, Species == 'setosa' )
subset( iris, Sepal.Length > 7.5 )
subset( iris, Sepal.Length > 5.1 & Sepal.Width > 3.9 )
subset( iris, Sepal.Length > 7.6, select = c( Petal.Length, Petal.Width ) )
iris.new <- iris(order(iris$Sepal.Length),)
iris.new <- iris( order( iris$Sepal.Length ), )
iris.new <- iris[order( iris$Sepal.Length ), ]
head( iris.new )
head( iris )
order( iris$Sepal.Length )
iris[ order( iris$Sepal.Length ), ]                  # iris$Sepal.Length 행의 data를 기준으로 오름차순 정렬
iris[ order( iris$Sepal.Length, decreasing = T ), ]  # iris$Sepal.Length 행의 data를 기준으로 내림차순 정렬
head( iris.new )
iris[ order( iris$Sepal.Length, decreasing = T, iris$Petal.Length ), ] # 동 순위의 데이터를 다른 기준을 적용하여 정렬
# 숫자를 임의로 추출
X <- 1:100
# 숫자를 임의로 추출
x <- 1:100
# 숫자를 임의로 추출
x <- 1:100
y <- sample( x, size = 10, replace = FALSE )
# size : 추출할 값 / replace = FALSE : 비복원 추출
y
# size : 추출할 값 / replace = FALSE : 비복원 추출
y
# size : 추출할 값 / replace = FALSE : 비복원 추출
y
# size : 추출할 값 / replace = FALSE : 비복원 추출
y
# size : 추출할 값 / replace = FALSE : 비복원 추출
y
# size : 추출할 값 / replace = FALSE : 비복원 추출
y
y <- sample( x, size = 10, replace = FALSE )
# size : 추출할 값 / replace = FALSE : 비복원 추출
y
# 행의 임의로 추출
idx <- sample( 1:nrow( iris ), size = 50, replace = FALSE )
idx.50 <- iris[ idx, ]
dim( idx.50 )
head( idx.50 )
sample( 1:20, size = 5 )
sample( 1:20, size = 5 )
sample( 1:20, size = 5 )
set.seed( 100 )
sample( 1:20, size = 5 )
set.seed( 100 )
sample( 1:20, size = 5 )
set.seed( 100 )
sample( 1:20, size = 5 )
#
# 4. 데이터 조합( combination ) : 주어진 데이터 값들 중에서 몇 개씩 짝을 지어 추출하는 작업
#
# combn( ) : 데이터 조합시 사용, 결과에서 각 열이 하나의 조합을 의미
combn( 1:5, 3 )
x = c( 'red', 'green', 'blue', 'black', 'white')
com <- combn( x, 2 )
com
for ( i in 1:ncol( com ) ) {
cat( com[ , i ], '\n' )
}
# 5. 데이터 집계와 병합
#
# 데이터 집계( aggregation ) : matrix와 data frame과 같은 2차원 데이터는
#                              data 그룹에 대해서 합계나 평균을 계산해야 하는 경우가 많은데 이 작업을 의미한다.
#
# aggregation( ) : data 집계 함수
#                    data            집계기준              집계작업내용
agg <- aggregate( iris[ , -5 ], by = list( iris$Species ), mean )
agg
agg <- aggregate( iris[ , -5 ], by = list( 품종 = iris$Species ), mean )
agg
agg <- aggregate( iris[ , -5 ], by = list( 표준편차 = iris$Species ), sd )
agg
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
# 병합 기준
z <- merge( x, y, by = c( 'name' ) )
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
y <- data.frame( name = c( 'a', 'b', 'd' ), korean = c( 75, 60, 90 ) )
x
y
#                      병합 기준
z <- merge( x, y, by = c( 'name' ) )
z
z2 <- merge( x, y )
z2
merge( x, y, all.x = T )
merge( x, y, all.y = T )
merge( x, y, all = T )
# 병합 기준이 되는 열의 이름이 다른 경우에 대한 병합
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
y <- data.frame( sname = c( 'a', 'b', 'c' ), korean = c( 75, 60, 90 ) )
x
y
merge( x, y, by.x = c( 'name' ), by.y = c( 'sname') )
