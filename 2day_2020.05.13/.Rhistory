# stdin(표준 입력 장치)  : 키보드
# stderr(표준 error 표시장치) : 모니터
#
print( 10 + 5 )     # 덧셈
print( 10 - 5 )     # 뺄셈
print( 10 * 5 )     # 곱셈
print( 10 / 5 )     # 나눗셈
print( 10 %% 5 )    # 나머지
print( 10 ^ 5 )     # 제곱
print( 10 % 5 )     # 잘못된 연산 %는 기호로 연산 자체를 할 수 없다.
#
# 변수(variable) - 통상 의미있는 이름을 부여한다.
#                - 메모리 영역에 대한 이름
#                - 값을 저장하는 메모리 영역
number1 <- 10
number2 <- 8
print( number1 + number2 ); number1 + number2
print( number1 - number2 ); number1 - number2
print( number1 * number2 ); number1 * number2
print( number1 / number2 ); number1 / number2
print( number1 %% number2 ); number1 %% number2
print( number1 ^ number2 ); number1 ^ number2
#
# 산술 연산 함수
#
log( 10 ) + 5        # 로그 함수
sqrt( 25 )           # 제곱근 함수
max( 5, 3, 2 )       # 최대값 함수
min( 5, 3, 2 )       # 최소값 함수
abs( -5 )            # 절대값 함수
factorial( 5 )       # 팩토리얼 함수
sin( pi / 2 )        # 삼각함수(sin)
cos( pi / 2 )        # 삼각함수(cos)
tan( pi / 2 )        # 삼각함수(tan)
var1 <- 10             # var1(변수)에 10을 저장하시오. -> 변수 생성
var2 <- 50             # var2(변수)에 50을 저장하시오. -> 변수 생성
var3 <- 15 * 25        # var3(변수)에 15 * 5를 저장하시오. -> 변수 생성
var4 <- var1 / var2    # var4(변수)에 var1(변수) / var2(변수)를 저장하시오. ->변수 생성
var5 <- 10 * 9         # var5(변수)에 10 * 9를 저장하시오. -> 변수 생성
print( var1 ); var1    # var1(변수)의 결과를 출력하시오.
print( var2 ); var2
print( var3 ); var3
print( var4 ); var4
print( var5 ); var5
#
# 자료형태(data type) : 값에 대한 형태
#
number <- 10           # number(변수)에 10(숫자)을 저장하시오. -> 변수 생성
string <- 'R Script'   # string(변수)에 'R Script'(문자)를 저장하시오. -> 변수 생성 ("R Script" <- 사용 가능)
boolean <- TRUE        # boolean(변수)에 TRUE(논리)를 저장하시오. -> 변수 생성 (논리는 대문자로만 작성)
temp <- NULL           # temp(변수)에 NULL(논리)를 저장하시오. -> 변수 생성 (논리는 대문자로만 작성)
# str() : 변수의 내용(type, 값) 확인 함수
class( number ); str( number )
class( string ); str( string )
class( boolean ); str( boolean )
class( temp ); str( temp )
# NA : 결측치(= missing value)
missing <- NA
missing
class( missing ); str( missing )
# '10' -> 영숫자 : 10(숫자)이 아니고, '10'('10' / '일공')이 된다.('' / ""  <- 둘 다 사용 가능)
chrnum <- '10'
chrnum
class( chrnum ); str( chrnum )
# is.함수 : 확인 함수 -> 결과 논리값(TRUE / FALSE의 논리값으로 결과 출력)
number <- 150
chanum <- '10'
class( number )
is.numeric( number )
class( chanum )
is.numeric( chanum )
is.character( number )
is.character( chanum )
# as.함수 : '형 변환(숫자 <-> 문자)' 함수
result <- number + as.numeric( chanum )  # as.numeric() : 문자 data -> 숫자data 변환
class( result ); str( result )
print( result )
as.character( 10 )
# vector(벡터) : 동일 자료형 값의 집합
#              : 1차원 배열, '열의 집합' 이라고도 한다.
# c() : connect의 약자로 벡터 생성 함수 (벡터의 값을 구성하기 위해서는 c()함수로 구성해 주어야 한다.)
vector1 <- c( 1, 3, 5, 7, 9 )
vector2 <- c( 'hello', 'world', 'R Script' )
vector3 <- c( TRUE, FALSE, TRUE, TRUE)
# vector 함수 구성 시, 숫자 + 문자를 같이 구성하면, 숫자를 문자로 변환(암묵적 변환(implcit))한다.
vector4 <- c( 1, 3, 'hello', TRUE )
class( vector1 ); str( vector1 ); print( vector1 )
class( vector2 ); str( vector2 ); print( vector2 )
class( vector3 ); str( vector3 ); print( vector3 )
class( vector4 ); str( vector4 ); print( vector4 )
# 연속값을 저장하는 벡터
vector5 <- 1:10
vector6 <- c( 1, 2, 3, 4, 5:10 )
print( vector5 ); print( vector6 )
# 논리값의 숫자data의 유형
vector_tc <- c( 1, 2, TRUE, FALSE )               # TRUE = 1 / FALSE = 0
class( vector_tc ); str( vector_tc ); vector_tc
# seq 함수 ( seq = Sequence )
vector7 <- seq( 1, 101, 3 )                 # seq( x, y, z ) -> z만큼씩 변화로 x~y까지 나열
vector9 <- seq( 1, 101, by = 3 )            # seq( x, y, z ) = seq( x, y, by = z )
vector8 <- seq( 0.1, 1.0, 0.1 )
vector9 <- seq( 1, 100, length.out = 4 )    # length.out = z => z만큼의 간격으로 1~100 까지 나열
# rep 함수 ( rep = repeat )
vector10 <- rep( 1, time = 5 )               # rep( x, y, time = z ) -> x~y까지 z번 반복
vector11 <- rep( 1:5, time = 3 )
vector12 <- rep( c( 1, 5, 9 ), time = 3 )    # 1, 5, 9를 z번 반복
vector7; vector8; vector9; vector10; vector11; vector12
# vector 원소값에 이름 지정
score <- c( 90, 85, 70 )
score
names( score )
names( score ) <- c( 'hong', 'kim', 'lee' )
names( score )
score
# names() 함수는 변수의 벡터 원소의 갯수의 수만큼 이름을 지정해야 한다.(원하는 결과 출력X)
score <- c( 90, 85, 70 )
score
names( score )
names( score ) <- c( 'hong', 'kim', 'lee', 'yoo' )
names( score )
score
# length() : vector 길이 (vector 요소 갯수 출력)
length( score )
# vector 요소 읽기
# [] -> 요소 입력, () -> 함수 입력
score[ 1 ]
score[ 2 ]
score[ 'kim' ]
# vector 요소 쓰기
score[ 1 ] <- 55
score
score[ 'lee' ] <- 77    # naems() 함수로 이름을 지정한 경우에만 가능능
score
# vector 요소 한번에 여러개 읽기
v <- c( 1, 4, 3, 7, 8 )
v[ c( 1, 3, 5 ) ]
v[ 1:3 ]
v[ seq( 1, 5, 2)]        # seq( x, y, z ) -> z만큼씩 변화로 x~y까지 나열이므로, [ 1, 4, 3, 7, 8] 중 1, 3, 5번 원소를 결과갑으로 출력
v[ -2 ]                  # [ 1, 4, 3, 7, 8] 중 2번 원소만 제외하고 결과값 전부 출력
v[ -c(3:5) ]; v[ -3:-5 ]
v[ c( 1, 3, 5 ) ] <- 5   # v변수 원소 중 1, 3, 5번 원소 값을 5로 변경
v
v [-2 ] <- 100           # v변수 원소 중 2번 원소 값을 제외한 원소 전부를 100로 변경
v
# vector 간의 연산 -> vector간의 길이(=data 갯수)가 동일해야 가능
x <- c( 1, 2, 3 )
y <- c( 4, 5, 6 )
x + y
x - y
x * y
x / y
x %% y
x ^ y
# vector에 적용 가능한 함수
v <- c( 1:10 )
v
sum( v )                         # 합계
sum( 2 * v )
mean( v )                        # 평균
mean( 1:5 )
mean( c( 1:5 ) )
mean( v[ 1:5 ] )
median( v )                      # 중앙값
median( 1:5 )
median( c( 1:5 ) )
median( v[ 1:5 ] )
max( v )                         # 최대값
max( 1:5 )
max( c( 1:5 ) )
max( v[ 1:5 ] )
min( v )                         # 최소값
min( 1:5 )
min( c( 1:5 ) )
min( v[ 1:5 ] )
sort( v )                        # 정렬(defualt = 오름차순)
sort( v, decreasing = FALSE )    # (decreasing = FALSE) 오름차순
sort( v, decreasing = TRUE )     # (decreasing = TRUE) 내림차순
sort( v[1:5] )
sort( v[1:5], decreasing = FALSE )
sort( v[1:5], decreasing = TRUE )
range( v )                       # 값의범위 (최소값 ~ 최대값)
range( v[ 1:7 ] )
var( v )                         # 분산
sd( v )                          # 표준편차
avg <- sum( v ) / length( v )    # mean() 함수와 결과 동일
avg
# 관계 / 논리연산 => TRUE / FALSE로 결과값 출력
# 관계 연산자 : >, >=(> =), <, <=(< =), ==(= =), !=(! =)
# 논리 연산자 : &&, &(AND), ||, |(OR), !(NOT)
number1 <- 10
number2 <- 19
number3 <- 3
number1 > number2
number1 >= number2
( number1 > number2 ) & ( number1 > number3 )   # 논리 연산 : AND
( number1 > number2 ) && ( number1 > number3 )  # 논리 연산 : AND
( number1 > number2 ) | ( number1 > number3 )   # 논리 연산 : OR
( number1 > number2 ) || ( number1 > number3 )  # 논리 연산 : OR
# 관계 연사자를 vector에 적용
v <- 1:10
v
v >= 5
v[ v > 5 ]
sum( v > 4 )
# v > 4 결과값 = FALSE(0) FALSE(0) FALSE(0) FALSE(0) TRUE(1) TRUE(1) TRUE(1) TRUE(1) TRUE(1) TRUE(1)
# TRUE = 1 / FALSE = 0 이므로, 1+1+1+1+1+1 = 6의 결과값이 출력
v == 5
# = 은 2개를 사용할 것('= =') / = 을 절대로 하나를 사용하면 안됨!!!!!!
condition <- v > 6 & v < 8
condition      # 관계 연산자는 결과값을 TRUE / FALSE로 출력
v[condition]   # 그러므로 숫자로 결과값을 보고 싶으면, [] <- 요소 읽기인 대괄호를 사용한다.
# 금일 벡터 교육은 교재 62~65p 까지의 내용임
# 66p부터는 안함
# seq 함수 ( seq = Sequence )
vector7 <- seq( 1, 101, 3 )                 # seq( x, y, z ) -> z만큼씩 변화로 x~y까지 나열
vector8
# seq 함수 ( seq = Sequence )
vector7 <- seq( 1, 10, 3 )                 # seq( x, y, z ) -> z만큼씩 변화로 x~y까지 나열
vector7
vector11 <- rep( 1:5, time = 3 )
vector11
names( score ) <- c( 'hong', 'kim', 'lee' )
names( score )
score
# vector 원소값에 이름 지정
score <- c( 90, 85, 70 )
score
names( score )
names( score ) <- c( 'hong', 'kim', 'lee' )
names( score )
length( 1:10 )
# vector 요소 읽기
# [] -> 요소 입력, () -> 함수 입력
score[ 1 ]
score[ 2 ]
score[ 'kim' ]
#
# vector
#
v <- 1:10
all( v > 5 )      # 벡터의 모든 요소가 조건에 만족하는가?
set( x, y )
#
# 2.1 List
#
# List : 동일 자료형, 다른 자료형을 저장할 수 있는 벡터
#
# list() : List 생성함수
#          요소는 key(이름) = value(값) 형식이다.
v <- c( 90, 85, 70 ,84 )
l <- list( name = 'hong', age = 30, status = TRUE, score = v )
l
l[ 1 ]
l
l[ 1 ]
l[[ 4 ]][ 1 ] # 해석 : 벡터 l의 4번째 요소의 첫번째 값을 가져온다.
l$name
#
# 2.2 factor ( 범주형, categorical )
#
# factor형 : 문자의 형태로 저장되며 범위를 갖는 값을 저장하는 data type
# factor() : 팩터형 벡터 생성 함수
# 굉장히 자주 쓰인다.(실무에서 엑셀 / 문서 정리를 일정한 값형태로 작성하기 때문)
# 외부데이터를 불러올 때, R에서 주로 factor형 자료로 변환하여 준다.
#
bt <- c( 'A', 'B', 'B', 'O', 'AB', 'A' )   #문자형 벡터
bt
bt.factor <- factor( bt )
bt
bt.factor
bt[ 3 ]
levels( bt.factor )
levels( bt.factor )
levels( gender.factor )
levels( gender.factor )
levels( gender.factor )
as.integer( gender.factor )
#
# 2.3 matrix
#
# matrix( 행렬, 2차원 배열 ) : 동일 자료형의 데이터를 저장하는 벡터 집합
# row( 행 ), obsevation( 관측값 ), data
# column( 열 ), variable( 변수 )
#
z <- matrix( 1:20, nrow = 4 )   # 열(column) 부터 채웠기 때문에 = 열우선 방식
#
# 2.3 matrix
#
# matrix( 행렬, 2차원 배열 ) : 동일 자료형의 데이터를 저장하는 벡터 집합
# row( 행 ), obsevation( 관측값 ), data
# column( 열 ), variable( 변수 )
#
matrix( 1:20, nrow = 4 )
z <- matrix( 1:20, nrow = 4, ncol = 5, byrow = T )  # 행(row) 부터 채웠기 때문에 = 행우선 방식 ( byrow = T 추가 )
z
dim( z )                        # dim ( =Dimension ) : 차원
#
# 2.2 factor ( 범주형, categorical )
#
# factor형 : 문자의 형태로 저장되며 범위를 갖는 값을 저장하는 data type
# factor() : 팩터형 벡터 생성 함수
# 굉장히 자주 쓰인다.(실무에서 엑셀 / 문서 정리를 일정한 값형태로 작성하기 때문)
# 외부데이터를 불러올 때, R에서 주로 factor형 자료로 변환하여 준다.
#
bt <- c( 'A', 'B', 'B', 'O', 'AB', 'A' )   #문자형 벡터
bt.factor <- factor( bt )
bt
bt.factor
gender <- c( '남', '여', '여', '남', '남', '여', '여', '남' )
gender.factor <- factor( gender )
gender
gender.factor
bt[ 3 ]
bt.factor[ 3 ]
gender[ 5 ]
gender.factor[ 5 ]
levels( bt.factor )
levels( gender.factor )
as.integer( bt.factor )
as.integer( gender.factor )
gender.factor[ 5 ]
gender.factor[ 5 ] <- '중' # 기존 data의 구성과 다른 값으로 입력 되지 않는다.
gender.factor
#
# 2.3 matrix
#
# matrix( 행렬, 2차원 배열 ) : 동일 자료형의 데이터를 저장하는 벡터 집합
# row( 행 ), obsevation( 관측값 ), data
# column( 열 ), variable( 변수 )
#
matrix( 1:20, nrow = 4 )
z <- matrix( 1:20, nrow = 4 )   # 열(column) 부터 채웠기 때문에 = 열우선 방식
z                               # default 값 : 열 채움
class ( z )
str( z )
dim( z )                        # dim ( =Dimension ) : 차원
z <- matrix( 1:20, nrow = 4, ncol = 5 )            # 열(column) 부터 채웠기 때문에 = 열우선 방식
z
z <- matrix( 1:20, nrow = 4, ncol = 5, byrow = T )  # 행(row) 부터 채웠기 때문에 = 행우선 방식 ( byrow = T 추가 )
z
x <- 1:4
y <- 5:8
z <- matrix( 1:20, nrow = 4, ncol = 5 )
z
m1 <- cbind( x, y )       # bind(=연결) / cbind = column(열) + bind(=연결) / x와 y의 인수를 변수로 봐야함
m1
m2 <- rbind( x, y )       # bind(=연결) / rbind = row(열) + bind(=연결) / x와 y의 인수를 관측치(=data)로 봐야함
m2
#
# matrix에서 cell의 값 읽기
#
z[ 2, 3 ]             # 2행 3열 data 출력
z
#
# matrix에서 cell의 값 읽기
#
z[ 2, 3 ]             # 2행 3열 data 출력
z[ 1, 4 ]             # 1행 4열 data 출력
z[ 2, ]               # 2행 전체 data 출력
z[ 2, ]               # 2행 전체 data 출력
z[ 3, ]               # 3행 전체 data 출력
z[ , c( 1, 4)]        # 4행 전체 1, 4열 data 출력
z[ , c( 1, 4)]        # 4행 전체 1, 4열 data 출력
z[ 2, 1:3 ]           # 2행의 1~3열 data 출력
z[ 2, c( 1, 2, 3 )]   # 2행의 1~3열 data 출력 ( 위 결과와 동일 )
#
# matrix 행/열에 이름 지정
#
score <- matrix( c( 90, 85, 69, 78,
85, 96, 49, 95,
90, 80, 70, 70), nrow = 4, ncol = 3, byrow = T ) # 행(row) 부터 채웠기 때문에 = 행우선 방식 ( byrow = T 추가 )
score
######
score <- matrix( c( 90, 85, 69, 78,
85, 96, 49, 95,
90, 80, 70, 70), nrow = 4, ncol = 3 )            # 열(column) 부터 채웠기 때문에 = 열우선 방식
score
rownames( score ) <- c( 'hong', 'kim', 'lee', 'yoo' )    # 행이름
rownames( score ) <- c( 'hong', 'kim', 'lee', 'yoo' )    # 행이름
colnames( score ) <- c( 'english', 'math', 'science ')   # 열이름
score
rm(colnames( score ))
score[ 'hong', 'math']
rownames( score )
colnames( score )
c <- colnames( score )
c[ 2 ]
colnames( score )[ 2 ]
#
# 2.4 data frame
# data frame : matrix와 동일한 구조를 갖으며 자료형에 구애받지 않고 저장하는 matrix
#  *** 변수(column)의 data가 다를수도 있다.
# data.frame() : data frame을 생성하는 함수
#
city <- c('seoul', 'busan', 'deajeon' ) # 문자 벡터
rank <- c( 1, 2, 3 )
data.frame( city, rank )
city.info <- data.frame( city, rank )   # 숫자 벡터
city.info
name <- c( 'hong', 'kim', 'lee' )
age <- c( 22, 20, 25 )
gender <- factor( c( 'M', 'F', 'M' ) )
blood.type <- factor( c( 'A', 'O', 'B' ) )
person.info <- data.frame( name, age, gender, blood.type )
person.info
str( person.info )
person.info
#
# data frame 요소 읽기
#
city.info[ 1, 1 ]
city <- c('seoul', 'busan', 'deajeon' ) # 문자 벡터
rank <- c( 1, 2, 3 )
city.info <- data.frame( city, rank )   # 숫자 벡터
city.info
class( city.info )
str( city.info )   # 3 obs.(3행) of  2 variables(2열)
dim( city.info )
city.info
#
# data frame 요소 읽기
#
city.info[ 1, 1 ]
city.info[ 1, ]
city.info[ , 1 ]
city.info[ city.info$city == 'seoul', ]
city.info[ , 'rank' ]
person2.info <- data.frame( name = c('hong', 'kim', 'lee' ),
age = c( 22, 20, 25 ),
gender = factor( c( 'M', 'F', 'M' ) ),
blood = factor( c( 'A', 'O', 'B' ) ) )
person2.info
person.info$name
person.info[ person.info$name == 'hong', ]
person.info[ person.info$name == 'hong', c( 'name', 'age' ) ]
person.info[ person.info$name == 'hong', c( 1, 2 ) ]          # c( 'name', 'age' ) = c( 1, 2 )
iris
head( iris )
tail( iris )
class( iris )
str( iris )
dim( iris )
iris
View( iris )
iris[ , c( 1:2 ) ]
iris[ , c( 1, 3, 5 ) ]
iris[ , c( 'Sepal.Length', 'Species' ) ]
iris[ 1:5, ]
iris[ 1:5, c( 1, 3 ) ]
nrow( state.x77 ) # nrow() : 행 갯수 출력
nrow( iris )
ncol( iris )
unique( iris[ , 5 ] )  # uniqie() : 중복된 데이터를 배제하고 출력 (문자열 data or factor type의 data를 볼때 유용함)
table( iris[ , 5 ] )                       # table() : 도수분포표 / 막대그래프로 작성 / factor type에 유리함
table( iris[ , 5 ] )                       # table() : 도수분포표 / 막대그래프로 작성 / factor type에 유리함
table ( iris )
table( iris[ , 5 ] )                       # table() : 도수분포표 / 막대그래프로 작성 / factor type에 유리함
table( person.info[ , 'blood.type' ] )
table( person.info[ , 'gender' ] )
#
# matrix / data frame 산술 연산 함수
#
colSums( iris[ , -5 ] ); apply( iris[ , 1:4 ], 2, sum )     # 열(row)별 합
#
# matrix / data frame 산술 연산 함수
#
colSums( iris[ , -5 ] )
#
# matrix / data frame 산술 연산 함수
#
colMeans( iris[ , -5 ] )
#
# matrix / data frame 산술 연산 함수
#
rowSums( iris[ , -5 ] )
#
# matrix / data frame 산술 연산 함수
#
rowMeans( iris[ , -5 ] )
apply( iris[ , -5 ], 2, median )
# 조건에 맞는 행(row)과 열(column) 추출( data frame만 가능 ) / (matrix는 사용 불가능)
subset( iris, Species == 'setosa' )
subset( iris, Sepal.Length > 5.0 & Sepal.Width > 4.0 )
m1 <- matrix( 1:20, 4, 5 )
m1
m2 <- matrix( 21:40, 4, 5 )
m2
class( state.x77 )
#
# matrix를 data frame으로, data frame을 matrix로 변환
#
st <- data.frame( state.x77 )    # matrix를 data frame으로 변환
class( st )
str( st )
dim( st )
# data type 확인 함수
is.matrix( state.x77 )
is.matrix( st )
# data type 확인 함수
is.matrix( state.x77 )
is.matrix( st )
# data type 확인 함수
is.matrix( state.x77 )
is.data.frame( iris )
#
# 2.5 파일 읽기 / 쓰기
#
# csv file 내용 읽어서 data frame 생성
#
air <- read.csv( 'airquality.csv', header = T )    # header = T 면, 제목줄을 데이터로 활용하지 않는다.
air2 <- read.csv( 'airquality.csv', header = F )   # header = F 면, 제목줄을 데이터로 활용한다.
class( air )
