plot( wt~mpg,
data = mtcars,
main = '중량-연비 그래프',
xlab = '중량',
ylab = '연비',
col = 'red',
pch = 20 )
res <- lm( wt~mpg, data = mrcars )  # lm( ) : 회귀식의 a, b를 구해주는 함수( y = ax + b)
abline( res )                       # 회귀선을 삽입하는 함수
plot( drat~wt,
data = mtcars,
main = '리어액슬기어비-중량 그래프',
col = 'red',
pch = 20 )
res <- lm( drat~wt, data = mtcars)
abline( res )
abline( res )                       # 회귀선을 삽입하는 함수
plot( drat~wt,
data = mtcars,
main = '리어액슬기어비-중량 그래프',
col = 'red',
pch = 20 )
res <- lm( drat~wt, data = mtcars)
abline( res )
par( mfrow = c( 1, 1 ) )
cor( iris[ , 1:4 ] )
view( cor( iris[ , 1:4 ] ) )
aaa <- cor( iris[ , 1:4 ] )
view( aaa
view( aaa )
cor( iris[ , 1:4 ] )
# apply( ) 함수 이용
col_na <- function( y ) {
return( sum( is.na( y ) ) )
}
na.count <- apply( x, 2, FUN = col_na ) # 방법 2
#
# 매트릭스와 데이터프레임 결측치 처리
#
x <- iris
na.count <- apply( x, 2, FUN = col_na ) # 방법 2
na.count                                # apply( x, 2, col_na ) 동일 결과 출력 / apply( 데이터명, 방향(1,2), 적용할 함수... )
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
#
# 매트릭스와 데이터프레임 결측치 처리
#
x <- iris
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
#  (1) 각 열별로 결측값이 몇 개인지 출력하시오.
col_na <- function( ds ) {
return( sum( is.na( ds ) ) )
}
na.count <- apply( x, 2, FUN = col_na ) # 방법 2
na.count                                # apply( x, 2, col_na ) 동일 결과 출력 / apply( 데이터명, 방향(1,2), 적용할 함수... )
na.count <- apply( ds, 2, FUN = col_na ) # 방법 2
na.count                                # apply( x, 2, col_na ) 동일 결과 출력 / apply( 데이터명, 방향(1,2), 적용할 함수... )
# data frame 행(row)의 결측치 확인
rowSums( is.na( x ) )              # 관측치별 NA 개수
sum( rowSums( is.na( x ) ) > 0 )   # NA가 포함된 관측치 개수
sum( is.na( x ) )                  # data set 전체에서의 NA 개수
#  (2) 결측값이 포함된 행들의 데이터를 출력하시오.
sum( is.na( ds ) )
ds
#  (3) 결측값이 포함된 행은 몇 개인지 출력하시오.
rowSums( is.na( ds ) )              # 관측치별 NA 개수
ds
#  (3) 결측값이 포함된 행은 몇 개인지 출력하시오.
sum( rowSums( is.na( ds ) ) > 0 )   # NA가 포함된 관측치 개수
rowSums( is.na( x ) )
rowSums( is.na( ds ) )
class(ds)
# data frame의 결측치 제거
#   - complete.cases( ) : data set에서 NA를 포함하지 않은 완전한(complete) 행을 찾는 함수
head( x )
x[ !complete.cases( x ), ]
y <- x[ complete.cases( x ), ]
head( y )
y <- x[ complete.cases( x ), ]
head( y )
y
#  (4) 결측값이 포함된 행들을 제외하고 새로운 데이터셋 ds.new를 만들어보시오.
as.data.frame( ds )
#  (4) 결측값이 포함된 행들을 제외하고 새로운 데이터셋 ds.new를 만들어보시오.
as.ds <- as.data.frame( ds )
dim(ds)
ds.new <- as.ds [ complete.cases( as.ds  ), ]
dim( as.ds )
dim( ds.new )
ds.new
dim( as.ds )
dim( ds.new )
st <- data.frame(state.x77)
#  (1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot( st )
boxplot.stats( st )$out
#  (1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot( st )
boxplot.stats( st )$out
boxplot.stats( st )
## 실습
# '도로교통공단_시도_시군구별_월별_교통사고(2018)'을 이용한 EDA 실습
setwd( "D:\\R_work\\6day_2020.05.19")
# 연속형 자료 시각화
# Histogram : 연속형 자료의 분포를 시각화하는 도구
#             연속형 자료에서 구간을 나누고 구간에 속한 값들의 개수를 세는 방법으로 사용
class( cars )
st <- data.frame(state.x77)
View(st)
View(st)
View(st)
boxplot.stats( st[ , 1:8 ] )
boxplot.stats( st[ , c(1:8) ] )
boxplot.stats( st[ , c(1:8) ] )$out
boxplot.stats( st )$out
boxplot.stats( st$Population )$out
#  (1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot( st )
boxplot.stats( st$Population )$out
boxplot.stats( st$Income )$out
boxplot.stats( st$Illiteracy )$out
boxplot.stats( st$Life.Exp )$out
boxplot.stats( st$Murder )$out
boxplot.stats( st$HS.Grad )$out
boxplot.stats( st$Frost )$out
boxplot.stats( st$Area )$out
#  (2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
out.pop <- boxplot.stats( st$Population )$out
out.in <- boxplot.stats( st$Income )$out
out.area <- boxplot.stats( st$Area )$out
out.val <- boxplot.stats( st$Income )$out     # 특이값 검출
st$Population[ st$Population %in% out.pop ] <- NA
st$Income[ st$Income %in% out.in ] <- NA
st$Area[ st$Area %in% out.area ] <- NA
head( st )
#  (3) st에서 NA가 존재하는 행들을 제거하여 st2에 저장하시오.
st2 <- st[ complete.cases( st ), ]
head( st2 )
head( st )
#  (3) st에서 NA가 존재하는 행들을 제거하여 st2에 저장하시오.
st2 <- st[ complete.cases( st ), ]
head( st2 )
# (1) airquality를 AQ에 저장하시오.
AQ <- airquality
aq
AQ
class(AQ)
#  (1) 각 열별로 결측값이 몇 개인지 출력하시오.
col_na <- function( ds ) {
return( sum( is.na( ds ) ) )
}
na.count <- apply( ds, 2, FUN = col_na )
na.count
# (2) AQ에서 열별로 NA의 개수를 출력하시오.
col_AQ <- function( AQ ) {
return( sum( is.na( AQ ) ) )
}
na.count <- apply( AQ, 2, FUN = col_AQ )
na.count
AQ
#  (3) 결측값이 포함된 행은 몇 개인지 출력하시오.
sum( rowSums( is.na( ds ) ) > 0 )
# (3) AQ에서 행별로 NA의 개수를 출력하시오.
rowSums( is.na( col_AQ ) )
#  (2) 결측값이 포함된 행들의 데이터를 출력하시오.
rowSums( is.na( ds ) )
# (2) AQ에서 열별로 NA의 개수를 출력하시오.
col_AQ <- function( AQ ) {
return( sum( is.na( AQ ) ) )
}
na.count <- apply( AQ, 2, FUN = col_AQ )
na.count
# (3) AQ에서 행별로 NA의 개수를 출력하시오.
rowSums( is.na( col_AQ ) )
# (3) AQ에서 행별로 NA의 개수를 출력하시오.
rowSums( is.na( AQ ) )
# data frame 행(row)의 결측치 확인
rowSums( is.na( x ) )              # 관측치별 NA 개수
sum( rowSums( is.na( x ) ) > 0 )   # NA가 포함된 관측치 개수
# (3) AQ에서 행별로 NA의 개수를 출력하시오.
sum( rowSums( is.na( AQ ) ) > 0 )
# (4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
rm_AQ <- AQ[ complete.cases( AQ ), ]
head( rm_AQ )
rm_AQ
out.val <- boxplot.stats( st$Income )$out     # 특이값 검출
st$Income[ st$Income %in% out.val] <- NA      # NA로 대체 ( %in% -> 벡터에서 포함 데이터 검색하라!)
head( st )
# (5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
AQ
# (5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
view(AQ)
# (5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을 출력하시오.
View(AQ)
# (2) AQ에서 열별로 NA의 개수를 출력하시오.
col_AQ <- function( AQ ) {
return( sum( is.na( AQ ) ) )
}
na.count <- apply( AQ, 2, FUN = col_AQ )
na.count
# 결측치 탐색을 위한 상관관계 분석
result.cor <- as.data.frame( abs( is.na( x ) ) )
apply(AQ, 1, mean)
apply(AQ, 1, mean(( AQ, na.rm = TRUE )))
rowMeans(AQ, na.rm = TRUE)
rowMeans(AQ, na.rm = TRUE)
avg <- rowMeans(AQ, na.rm = TRUE)
# 결측치 대체 제거 및 제거
z1 <- c( 1, 2, 3, NA, NA, 8 )
z2 <- c( 5, 8, 1, NA, 3, NA, 7 )
z1[ is.na( z1 ) ] <- 0             # NA를 0으로 대체
z1
# 결측치 대체 제거 및 제거
z1 <- c( 1, 2, 3, NA, NA, 8 )
z2 <- c( 5, 8, 1, NA, 3, NA, 7 )
z1
z2
is.na( z1 )
na.count <- apply( AQ, 2, FUN = col_AQ )
na.count
out.val <- boxplot.stats( st$Income )$out     # 특이값 검출
out.val
# 상자그래프를 이용한 특이값 찾기
st <- data.frame( state.x77 )
boxplot( st$Income )
boxplot.stats( st$Income )$out
out.val
out.val <- boxplot.stats( st$Income )$out     # 특이값 검출
out.val
out.OZ <- boxplot.stats( airquality$Ozone )$out
out.oz <- boxplot.stats( airquality$Ozone )$out
out.so <- boxplot.stats( airquality$Solar.R )$out
airquality$Ozone[ airquality$Ozone %in% out.oz] <- rowMeans(AQ, na.rm = TRUE)
avg <- rowMeans(airquality, na.rm = TRUE)
airquality$Ozone[ airquality$Ozone %in% out.oz] <- rowMeans(airquality, na.rm = TRUE)
rowMeans(airquality$Ozone, na.rm = TRUE)
mean(airquality$Ozone, na.rm = TRUE)
airquality$Ozone[ airquality$Ozone %in% out.oz] <- mean(airquality$Ozone, na.rm = TRUE)
mean(airquality$Solar.R, na.rm = TRUE)
airquality$Ozone[ airquality$Ozone %in% out.oz] <- mean(airquality$Ozone, na.rm = TRUE)
airquality$Solar.R[ airquality$Solar.R %in% out.oz] <- mean(airquality$Solar.R, na.rm = TRUE)
airquality
out.oz <- boxplot.stats( airquality$Ozone )$out
out.so <- boxplot.stats( airquality$Solar.R )$out
airquality$Ozone[ airquality$Ozone %in% out.oz] <- mean(airquality$Ozone, na.rm = TRUE)
airquality$Solar.R[ airquality$Solar.R %in% out.oz] <- mean(airquality$Solar.R, na.rm = TRUE)
out.val <- boxplot.stats( st$Income )$out     # 특이값 검출
st$Income[ st$Income %in% out.val] <- NA      # NA로 대체 ( %in% -> 벡터에서 포함 데이터 검색하라!)
head( st )
# 특이값의 처리 - 특이값 포함 관측치(=row) 제거
#
# 일반적으로 특이값 포함 관측치(=row) 제거는 특이값을 NA로 바꾸고, NA를 포함한 행을 제거하는 방식으로 진행
#
st
out.oz <- boxplot.stats( airquality$Ozone )$out
out.so <- boxplot.stats( airquality$Solar.R )$out
airquality$Ozone[ airquality$Ozone %in% out.oz] <- mean(airquality$Ozone, na.rm = TRUE)
out.oz <- boxplot.stats( airquality$Ozone )$out
out.so <- boxplot.stats( airquality$Solar.R )$out
airquality$Ozone[ airquality$Ozone %in% out.oz] <- mean(airquality$Ozone, na.rm = TRUE)
airquality$Solar.R[ airquality$Solar.R %in% out.so] <- mean(airquality$Solar.R, na.rm = TRUE)
airquality
class(AQ)
# (1) airquality를 AQ에 저장하시오.
AQ <- airquality
AQ
class(AQ)
result <- md.pattern( x ) # 결측치 처리를 위한 '결측치' 유형 및 확인 함수
library( mice )
result <- md.pattern( x ) # 결측치 처리를 위한 '결측치' 유형 및 확인 함수
#
# 매트릭스와 데이터프레임 결측치 처리
#
x <- iris
result <- md.pattern( x ) # 결측치 처리를 위한 '결측치' 유형 및 확인 함수
out.oz
boxplot.stats( airquality$Ozone )$out
# (1) airquality를 AQ에 저장하시오.
AQ <- airquality
AQ
# (2) AQ에서 열별로 NA의 개수를 출력하시오.
col_AQ <- function( AQ ) {
return( sum( is.na( AQ ) ) )
}
na.count <- apply( AQ, 2, FUN = col_AQ )
na.count
iris[ order( iris$Sepal.Length ), ]                  # iris$Sepal.Length 행의 data를 기준으로 오름차순 정렬
#  (1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
state.x77[ order( state.x77$Population ), ]
head( iris )
order( iris$Sepal.Length )
iris[ order( iris$Sepal.Length ), ]                  # iris$Sepal.Length 행의 data를 기준으로 오름차순 정렬
state.x77
#  (1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
state.x77[ order( state.x77$Population ), ]
class(state.x77)
#  (1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
as.data.frame( state.x77 )
#  (1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
state.x77[ order( state.x77[ ,1 ]), ]
#  (1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
state.x77[ order( state.x77[ ,'Population' ]), ]
#  (2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
state.x77[ order( state.x77[ ,'Income' ]), decreasing = T]
#  (2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
state.x77[ order( state.x77[ ,'Income' ]), decreasing = T]
#  (2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
state.x77[ order( state.x77[ ,'Income' ]), decreasing = F]
#  (2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
state.x77[ order( state.x77[ ,'Income' ]), decreasing = T]
#  (2) state.x77 데이터셋을 Income(소득)을 기준으로 내림차순 정렬하시오.
state.x77[ order( state.x77[ ,'Income' ], decreasing = T), ]
#  (3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
state.x77[ order( state.x77[ ,'Illiteracy' ],), ]
#  (3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
state.x77[ order( state.x77[ ,'Illiteracy' ]), ]
#  (3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
state.x77[ order( state.x77[ ,'Illiteracy' ]), ]
#  (3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
row_ill <- state.x77[ order( state.x77[ ,'Illiteracy' ]), ]
row_ill[ 1:10,'Illiteracy' ]
#
# 2. 데이터 분리와 선택
#
# split( ) : 하나의 data set을 열의 값을 기준으로 여러 개의 data set으로 분리
# subset( ) : data set으로부터 조건에 맞는 행들을 추출
#
# 데이터 분리
sp <- split( iris, iris$Species )
sp
#  (1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하
#      시오.(단, split() 함수를 사용)
mt.gear <- split( mtcars, mtcars$gear )
mt.gear
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- split( mtcars, mtcars$gear ==4 )
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- split( mtcars, mtcars$gear == 4 )
mt.gear4
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- mt.gear == 4
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
subset( mtcars, mt.gear == 'setosa' )
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
subset( mtcars, mt.gear == 4 )
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
subset( mt.gear, mt.gear == 4 )
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear = 4
mt.gear4
mt.gear = 4
mt.gear4
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
y <- data.frame( name = c( 'a', 'b', 'd' ), korean = c( 75, 60, 90 ) )
x
y
#                      병합 기준
z <- merge( x, y, by = c( 'name' ) )  # 'name'이 같은 변수와 병합한 결과를 출력한다.
z
# 병합 기준이 되는 열의 이름이 다른 경우에 대한 병합
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
y <- data.frame( sname = c( 'a', 'b', 'c' ), korean = c( 75, 60, 90 ) )
x
y
merge( x, y, by.x = c( 'name' ), by.y = c( 'sname') )
mt.gear4
#  (3) mt.gear에서 gear(기어)의 개수가 3인 그룹과 5인 그룹의 데이터를 합쳐서 mt.gear.35에 저장하고 내용을 출력하시오.
mt.gear3 <- mt.gear = 3
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- mt.gear = 4
#  (1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mt.gear <- split( mtcars, mtcars$gear )
mt.gear
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- mt.gear = 4
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- mt.gear = 4
mt.gear4
mt.gear3
#  (3) mt.gear에서 gear(기어)의 개수가 3인 그룹과 5인 그룹의 데이터를 합쳐서 mt.gear.35에 저장하고 내용을 출력하시오.
mt.gear3 <- mt.gear = 3
#  (1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mt.gear <- split( mtcars, mtcars$gear )
mt.gear
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- mt.gear = 4
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- mt.gear$4
mt.gear
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear4 <- mt.gear == 4
mt.gear4
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
subset( mtcars, mt.gear == 4 )
mt.gear4 <- mt.gear == 4
mt.gear4 <- mt.gear = 4
class(mt.gear)
#  (1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mt.gear <- as.data.frame( split( mtcars, mtcars$gear ) )
#  (1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mt.gear <- split( mtcars, mtcars$gear )
mt.gear
#
# 2. 데이터 분리와 선택
#
# split( ) : 하나의 data set을 열의 값을 기준으로 여러 개의 data set으로 분리
# subset( ) : data set으로부터 조건에 맞는 행들을 추출
#
# 데이터 분리
sp <- split( iris, iris$Species )
sp
#  (1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.(단, split() 함수를 사용)
mt.gear <- split( mtcars, mtcars$gear )
mt.gear
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
subset( mtcars, mt.gear == '4' )
#  (2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
mt.gear$`4`
#  (3) mt.gear에서 gear(기어)의 개수가 3인 그룹과 5인 그룹의 데이터를 합쳐서 mt.gear.35에 저장하고 내용을 출력하시오.
mt.gear3 <- mt.gear$`3`
mt.gear3
mt.gear5 <- mt.gear$`5`
mt.gear5
mt.gear.35 <- merge( mt.gear3, mt.gear5)
mt.gear.35
mt.gear.35 <- merge( mt.gear3, mt.gear5, by = c( 'gear' ) )
mt.gear.35
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
y <- data.frame( name = c( 'a', 'b', 'd' ), korean = c( 75, 60, 90 ) )
x
y
#                      병합 기준
z <- merge( x, y, by = c( 'name' ) )  # 'name'이 같은 변수와 병합한 결과를 출력한다.
z
mt.gear.35 <- merge( mt.gear3, mt.gear5, all = T  )
mt.gear.35
subset( mtcars, wt > 1.5 & wt < 3 )
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis", "Modern Applied Statistics ...",
"LISP-STAT","Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
#                      병합 기준
z <- merge( x, y, by = c( 'name' ) )  # 'name'이 같은 변수와 병합한 결과를 출력한다.
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
y <- data.frame( name = c( 'a', 'b', 'd' ), korean = c( 75, 60, 90 ) )
x
y
#                      병합 기준
z <- merge( x, y, by = c( 'name' ) )  # 'name'이 같은 변수와 병합한 결과를 출력한다.
z
merge( x, y, by.x = c( 'name' ), by.y = c( 'sname') )
# 병합 기준이 되는 열의 이름이 다른 경우에 대한 병합
x <- data.frame( name = c( 'a', 'b', 'c' ), math = c( 90, 80, 40 ) )
y <- data.frame( sname = c( 'a', 'b', 'c' ), korean = c( 75, 60, 90 ) )
x
y
merge( x, y, by.x = c( 'name' ), by.y = c( 'sname') )
# (1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오
#     (두데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name') )
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis", "Modern Applied Statistics ...",
"LISP-STAT","Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
authors
books
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis", "Modern Applied Statistics ...",
"LISP-STAT","Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
authors
books
# (1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오
#     (두데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name') )
# (4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge( authors, books, all = T )
# (2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
merge( authors, books, all.x = T )
# (3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge( authors, books, all.y = T )
# (2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all.x = T )
# (3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge( authors, books, merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all.y = T )
# (3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge( authors, books, merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all.y = T ) )
# (3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all.y = T )
# (2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all.x = T )
# (2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 authors의 행들이 모두 표시되도록 하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all.x = T )
# (3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books의 행들은 모두 표시되도록 하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all.y = T )
# (4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all = T )
# (4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name'), all = T )
