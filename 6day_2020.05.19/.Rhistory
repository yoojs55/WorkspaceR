# 시도, 시군구, 월의 data 유형이 문자일 경우 시행하지 않는다.
df$시도 <- as.character( df$시도 )
df$시군구 <- as.character( df$시군구 )
df$월 <- as.character( df$월 )
str( df )
month <- c()
for ( i in 1:nrow( df ) ) {
if ( df[ i, "월" ] == "01월" ) {
month[ i ] <- 1
}else if ( df[ i, "월" ] == "02월" ) {
month[ i ] <- 2
}else if ( df[ i, "월" ] == "03월" ) {
month[ i ] <- 3
}else if ( df[ i, "월" ] == "04월" ) {
month[ i ] <- 4
}else if ( df[ i, "월" ] == "05월" ) {
month[ i ] <- 5
}else if ( df[ i, "월" ] == "06월" ) {
month[ i ] <- 6
}else if ( df[ i, "월" ] == "07월" ) {
month[ i ] <- 7
}else if ( df[ i, "월" ] == "08월" ) {
month[ i ] <- 8
}else if ( df[ i, "월" ] == "09월" ) {
month[ i ] <- 9
}else if ( df[ i, "월" ] == "10월" ) {
month[ i ] <- 10
}else if ( df[ i, "월" ] == "11월" ) {
month[ i ] <- 11
}else if ( df[ i, "월" ] == "12월" ) {
month[ i ] <- 12
}
}
month
df <- data.frame( df, month )
str( df )
head( df )
tail( df )
# 3. 시도 이름 분리
local <- unique( df[ , 1 ] )
local
# 4. 서울 데이터 분리
local.seoul <- df[ df$시도 == local[ 1 ], ]
dim( local.seoul )
str( local.seoul )
head( local.seoul )
tail( local.seoul )
# 4. 서울 구별 이름 분리
local.gu <- unique( local.seoul[ , 2 ] )
local.gu <- as.vector( local.gu )
local.gu.index <- 1:length( local.gu )
# 5. 월 분리
month <- as.character( unique( local.seoul[ , 3 ] ) )
month <- as.vector( month )
month.index <- 1:12
# 6. 서울 월별 사고 건수
seoul.accident <- c()
for ( i in 1:length( month.index ) ) {
seoul.accident[ i ] <- sum( subset( local.seoul, month == i )$발생건수 )
}
names( seoul.accident ) <- month
seoul.accident
max.month <- max( seoul.accident )
max.month.name <- names( seoul.accident[ seoul.accident == max.month ] )
min.month <- min( seoul.accident )
min.month.name <- names( seoul.accident[ seoul.accident == min.month ] )
cat( "서울 사고 발생이 최고인 월 : ", max.month.name, " [ ", max.month, " ]", "\n",
"서울 사고 발생이 최저인 월 : ", min.month.name, " [ ", min.month, " ]" )
barplot( seoul.accident, main = "서울시 월별 발생 건수" )
# 7. 서울 구별 사고 건수
seoul.gu.accident <- c()
for ( i in 1:length( local.gu ) ) {
seoul.gu.accident[ i ] <- sum( subset( local.seoul, local.seoul$시군구 == local.gu[ i ] )$발생건수 )
}
names( seoul.gu.accident ) <- local.gu
seoul.gu.accident
max.gu <- max( seoul.gu.accident )
max.gu.name <- names( seoul.gu.accident[ seoul.gu.accident == max.gu ] )
min.gu <- min( seoul.gu.accident )
min.gu.name <- names( seoul.gu.accident[ seoul.gu.accident == min.gu ] )
cat( "서울 사고 발생이 최고인 구 : ", max.gu.name, " [ ", max.gu, " ]", "\n",
"서울 사고 발생이 최저인 구 : ", min.gu.name, " [ ", min.gu, " ]" )
barplot( seoul.gu.accident, main = "서울시 구별 발생 건수" )
# 8. 서울 월별 구별 사고 건수
seoul.1 <- subset( local.seoul, month == 1 )$발생건수
names( seoul.1 ) <- local.gu
print( "1월 구별 사고 건수" ); seoul.1
max.seoul.1 <- max( seoul.1 )
max.seoul.1.name <- names( seoul.1[ seoul.1 == max.seoul.1 ] )
min.seoul.1 <- min( seoul.1 )
min.seoul.1.name <- names( seoul.1[ seoul.1 == min.seoul.1 ] )
cat( "서울 1월 사고 발생이 최고인 구 : ", max.seoul.1.name, " [ ", max.seoul.1, " ]", "\n",
"서울 1월 사고 발생이 최저인 구 : ", min.seoul.1.name, " [ ", min.seoul.1, " ]" )
seoul.2 <- subset( local.seoul, month == 2 )$발생건수
names( seoul.2 ) <- local.gu
print( "2월 구별 사고 건수" ); seoul.2
max.seoul.2 <- max( seoul.2 )
max.seoul.2.name <- names( seoul.2[ seoul.2 == max.seoul.2 ] )
min.seoul.2 <- min( seoul.2 )
min.seoul.2.name <- names( seoul.2[ seoul.2 == min.seoul.2 ] )
cat( "서울 2월 사고 발생이 최고인 구 : ", max.seoul.2.name, " [ ", max.seoul.2, " ]", "\n",
"서울 2월 사고 발생이 최저인 구 : ", min.seoul.2.name, " [ ", min.seoul.2, " ]" )
seoul.3 <- subset( local.seoul, month == 3 )$발생건수
names( seoul.3 ) <- local.gu
print( "3월 구별 사고 건수" ); seoul.3
max.seoul.3 <- max( seoul.3 )
max.seoul.3.name <- names( seoul.3[ seoul.3 == max.seoul.3 ] )
min.seoul.3 <- min( seoul.3 )
min.seoul.3.name <- names( seoul.3[ seoul.3 == min.seoul.3 ] )
cat( "서울 3월 사고 발생이 최고인 구 : ", max.seoul.3.name, " [ ", max.seoul.3, " ]", "\n",
"서울 3월 사고 발생이 최저인 구 : ", min.seoul.3.name, " [ ", min.seoul.3, " ]" )
seoul.4 <- subset( local.seoul, month == 4 )$발생건수
names( seoul.4 ) <- local.gu
print( "4월 구별 사고 건수" ); seoul.4
max.seoul.4 <- max( seoul.4 )
max.seoul.4.name <- names( seoul.4[ seoul.4 == max.seoul.4 ] )
min.seoul.4 <- min( seoul.4 )
min.seoul.4.name <- names( seoul.4[ seoul.4 == min.seoul.4 ] )
cat( "서울 4월 사고 발생이 최고인 구 : ", max.seoul.4.name, " [ ", max.seoul.4, " ]", "\n",
"서울 4월 사고 발생이 최저인 구 : ", min.seoul.4.name, " [ ", min.seoul.4, " ]" )
seoul.5 <- subset( local.seoul, month == 5 )$발생건수
names( seoul.5 ) <- local.gu
print( "5월 구별 사고 건수" ); seoul.5
max.seoul.5 <- max( seoul.5 )
max.seoul.5.name <- names( seoul.5[ seoul.5 == max.seoul.5 ] )
min.seoul.5 <- min( seoul.5 )
min.seoul.5.name <- names( seoul.5[ seoul.5 == min.seoul.5 ] )
cat( "서울 5월 사고 발생이 최고인 구 : ", max.seoul.5.name, " [ ", max.seoul.5, " ]", "\n",
"서울 5월 사고 발생이 최저인 구 : ", min.seoul.5.name, " [ ", min.seoul.5, " ]" )
seoul.6 <- subset( local.seoul, month == 6 )$발생건수
names( seoul.6 ) <- local.gu
print( "1월 구별 사고 건수" ); seoul.6
max.seoul.6 <- max( seoul.6 )
max.seoul.6.name <- names( seoul.6[ seoul.6 == max.seoul.6 ] )
min.seoul.6 <- min( seoul.6 )
min.seoul.6.name <- names( seoul.6[ seoul.6 == min.seoul.6 ] )
cat( "서울 6월 사고 발생이 최고인 구 : ", max.seoul.6.name, " [ ", max.seoul.6, " ]", "\n",
"서울 6월 사고 발생이 최저인 구 : ", min.seoul.6.name, " [ ", min.seoul.6, " ]" )
seoul.7 <- subset( local.seoul, month == 7 )$발생건수
names( seoul.7 ) <- local.gu
print( "7월 구별 사고 건수" ); seoul.7
max.seoul.7 <- max( seoul.7 )
max.seoul.7.name <- names( seoul.7[ seoul.7 == max.seoul.7 ] )
min.seoul.7 <- min( seoul.7 )
min.seoul.7.name <- names( seoul.7[ seoul.7 == min.seoul.7 ] )
cat( "서울 7월 사고 발생이 최고인 구 : ", max.seoul.7.name, " [ ", max.seoul.7, " ]", "\n",
"서울 7월 사고 발생이 최저인 구 : ", min.seoul.7.name, " [ ", min.seoul.7, " ]" )
seoul.8 <- subset( local.seoul, month == 8 )$발생건수
names( seoul.8 ) <- local.gu
print( "8월 구별 사고 건수" ); seoul.8
max.seoul.8 <- max( seoul.8 )
max.seoul.8.name <- names( seoul.8[ seoul.8 == max.seoul.8 ] )
min.seoul.8 <- min( seoul.8 )
min.seoul.8.name <- names( seoul.8[ seoul.8 == min.seoul.8 ] )
cat( "서울 8월 사고 발생이 최고인 구 : ", max.seoul.8.name, " [ ", max.seoul.8, " ]", "\n",
"서울 8월 사고 발생이 최저인 구 : ", min.seoul.8.name, " [ ", min.seoul.8, " ]" )
seoul.9 <- subset( local.seoul, month == 9 )$발생건수
names( seoul.9 ) <- local.gu
print( "9월 구별 사고 건수" ); seoul.9
max.seoul.9 <- max( seoul.9 )
max.seoul.9.name <- names( seoul.9[ seoul.9 == max.seoul.9 ] )
min.seoul.9 <- min( seoul.9 )
min.seoul.9.name <- names( seoul.9[ seoul.9 == min.seoul.9 ] )
cat( "서울 9월 사고 발생이 최고인 구 : ", max.seoul.9.name, " [ ", max.seoul.9, " ]", "\n",
"서울 9월 사고 발생이 최저인 구 : ", min.seoul.9.name, " [ ", min.seoul.9, " ]" )
seoul.10 <- subset( local.seoul, month == 10 )$발생건수
names( seoul.10 ) <- local.gu
print( "10월 구별 사고 건수" ); seoul.10
max.seoul.10 <- max( seoul.10 )
max.seoul.10.name <- names( seoul.10[ seoul.10 == max.seoul.10 ] )
min.seoul.10 <- min( seoul.10 )
min.seoul.10.name <- names( seoul.10[ seoul.10 == min.seoul.10 ] )
cat( "서울 10월 사고 발생이 최고인 구 : ", max.seoul.10.name, " [ ", max.seoul.10, " ]", "\n",
"서울 10월 사고 발생이 최저인 구 : ", min.seoul.10.name, " [ ", min.seoul.10, " ]" )
seoul.11 <- subset( local.seoul, month == 11 )$발생건수
names( seoul.11 ) <- local.gu
print( "11월 구별 사고 건수" ); seoul.11
max.seoul.11 <- max( seoul.11 )
max.seoul.11.name <- names( seoul.11[ seoul.11 == max.seoul.11 ] )
min.seoul.11 <- min( seoul.11 )
min.seoul.11.name <- names( seoul.11[ seoul.11 == min.seoul.11 ] )
cat( "서울 11월 사고 발생이 최고인 구 : ", max.seoul.11.name, " [ ", max.seoul.11, " ]", "\n",
"서울 11월 사고 발생이 최저인 구 : ", min.seoul.11.name, " [ ", min.seoul.11, " ]" )
seoul.12 <- subset( local.seoul, month == 12 )$발생건수
names( seoul.12 ) <- local.gu
print( "12월 구별 사고 건수" ); seoul.12
max.seoul.12 <- max( seoul.12 )
max.seoul.12.name <- names( seoul.12[ seoul.12 == max.seoul.12 ] )
min.seoul.12 <- min( seoul.12 )
min.seoul.12.name <- names( seoul.12[ seoul.12 == min.seoul.12 ] )
cat( "서울 12월 사고 발생이 최고인 구 : ", max.seoul.12.name, " [ ", max.seoul.12, " ]", "\n",
"서울 12월 사고 발생이 최저인 구 : ", min.seoul.12.name, " [ ", min.seoul.12, " ]" )
seoul.spring <- sum( c( seoul.3, seoul.4, seoul.5 ) )
seoul.summer <- sum( c( seoul.6, seoul.7, seoul.8 ) )
seoul.fall <- sum( c( seoul.9, seoul.10, seoul.11 ) )
seoul.winter <- sum( c( seoul.12, seoul.1, seoul.1 ) )
season.accident <- c( seoul.spring, seoul.summer, seoul.fall, seoul.winter )
season <- c( '봄', '여름', '가을', '겨울' )
names( season.accident ) <- season
max.season <- max( season.accident )
max.season.name <- names( season.accident[ season.accident == max.season ] )
min.season <- min( season.accident )
min.season.name <- names( season.accident[ season.accident == min.season ] )
cat( "서울 사고 발생 최고 계절 : ", max.season.name, " [ ", max.season, " ]", "\n",
"서울 사고 발생 최저 계절 : ", min.season.name, " [ ", min.season, " ]" )
par( mfrow = c( 4, 1 ) )
plot( local.gu.length,
seoul.3,
main = "서울시 봄 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.length, seoul.4, type = "b", col = "blue" )
lines( local.gu.length, seoul.5, type = "b", col = "black" )
plot( local.gu.length,
seoul.6,
main = "서울시 여름 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.length, seoul.7, type = "b", col = "blue" )
lines( local.gu.length, seoul.8, type = "b", col = "black" )
plot( local.gu.length,
seoul.9,
main = "서울시 가을 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.length, seoul.10, type = "b", col = "blue" )
lines( local.gu.length, seoul.11, type = "b", col = "black" )
plot( local.gu.length,
seoul.12,
main = "서울시 겨울 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.length, seoul.1, type = "b", col = "blue" )
lines( local.gu.length, seoul.2, type = "b", col = "black" )
par( mfrow = c( 1, 1 ) )
season.accident <- c( seoul.spring, seoul.summer, seoul.fall, seoul.winter )
season <- c( '봄', '여름', '가을', '겨울' )
names( season.accident ) <- season
max.season <- max( season.accident )
max.season.name <- names( season.accident[ season.accident == max.season ] )
min.season <- min( season.accident )
min.season.name <- names( season.accident[ season.accident == min.season ] )
cat( "서울 사고 발생 최고 계절 : ", max.season.name, " [ ", max.season, " ]", "\n",
"서울 사고 발생 최저 계절 : ", min.season.name, " [ ", min.season, " ]" )
par( mfrow = c( 4, 1 ) )
plot( local.gu.index,
seoul.3,
main = "서울시 봄 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.index, seoul.4, type = "b", col = "blue" )
lines( local.gu.index, seoul.5, type = "b", col = "black" )
plot( local.gu.index,
seoul.6,
main = "서울시 여름 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.index, seoul.7, type = "b", col = "blue" )
lines( local.gu.index, seoul.8, type = "b", col = "black" )
plot( local.gu.index,
seoul.9,
main = "서울시 가을 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.index, seoul.10, type = "b", col = "blue" )
lines( local.gu.index, seoul.11, type = "b", col = "black" )
plot( local.gu.index,
seoul.12,
main = "서울시 겨울 사고건수",
type = "b",
lty = 1,
lwd = 1,
col = "red",
ylim = c( 50, 350 ),
xlab = "구",
ylab = "발생건수" )
lines( local.gu.index, seoul.1, type = "b", col = "blue" )
lines( local.gu.index, seoul.2, type = "b", col = "black" )
for ( i in 1:nrow( df ) ) {
if ( df[ i, "월" ] == "01월" ) {
month[ i ] <- 1
}else if ( df[ i, "월" ] == "02월" ) {
month[ i ] <- 2
}else if ( df[ i, "월" ] == "03월" ) {
month[ i ] <- 3
}else if ( df[ i, "월" ] == "04월" ) {
month[ i ] <- 4
}else if ( df[ i, "월" ] == "05월" ) {
month[ i ] <- 5
}else if ( df[ i, "월" ] == "06월" ) {
month[ i ] <- 6
}else if ( df[ i, "월" ] == "07월" ) {
month[ i ] <- 7
}else if ( df[ i, "월" ] == "08월" ) {
month[ i ] <- 8
}else if ( df[ i, "월" ] == "09월" ) {
month[ i ] <- 9
}else if ( df[ i, "월" ] == "10월" ) {
month[ i ] <- 10
}else if ( df[ i, "월" ] == "11월" ) {
month[ i ] <- 11
}else if ( df[ i, "월" ] == "12월" ) {
month[ i ] <- 12
}
}
month
df <- data.frame( df, month )
# str( df )에서 시도, 시군구, 월의 data 유형일 경우 아래의 함수로 문자열로 전환하여 준다.
# 시도, 시군구, 월의 data 유형이 문자일 경우 시행하지 않는다.
df$시도 <- as.character( df$시도 )
df$시군구 <- as.character( df$시군구 )
df$월 <- as.character( df$월 )
str( df )
month <- c()
for ( i in 1:nrow( df ) ) {
if ( df[ i, "월" ] == "01월" ) {
month[ i ] <- 1
}else if ( df[ i, "월" ] == "02월" ) {
month[ i ] <- 2
}else if ( df[ i, "월" ] == "03월" ) {
month[ i ] <- 3
}else if ( df[ i, "월" ] == "04월" ) {
month[ i ] <- 4
}else if ( df[ i, "월" ] == "05월" ) {
month[ i ] <- 5
}else if ( df[ i, "월" ] == "06월" ) {
month[ i ] <- 6
}else if ( df[ i, "월" ] == "07월" ) {
month[ i ] <- 7
}else if ( df[ i, "월" ] == "08월" ) {
month[ i ] <- 8
}else if ( df[ i, "월" ] == "09월" ) {
month[ i ] <- 9
}else if ( df[ i, "월" ] == "10월" ) {
month[ i ] <- 10
}else if ( df[ i, "월" ] == "11월" ) {
month[ i ] <- 11
}else if ( df[ i, "월" ] == "12월" ) {
month[ i ] <- 12
}
}
month
str( df )
# 3. 시도 이름 분리
local <- unique( df[ , 1 ] )
local
local <- unique( df[ , '시도' ] )
local
rm( local )
local <- unique( df[ , '시도' ] )
rm( local )
local
local <- unique( df[ , '시도' ] )
local
local.gu.index
# 벡터(vector)에 대한 결측치 처리
#
# R에서는 결측치를 NA로 표기
# NA는 숫자형, 문자형, 논리형, 값 어디에나 결측치를 나타내는 용도로 사용
#
# 결측치 특성과 존재 여부 확인
z <- c( 1, 2, 3, NA, 5, NA, 8 )
sum( z )
is.na( z )
sum( z )
sum( z, na.rm = TRUE )
# 벡터(vector)에 대한 결측치 처리
#
# R에서는 결측치를 NA로 표기
# NA는 숫자형, 문자형, 논리형, 값 어디에나 결측치를 나타내는 용도로 사용
#
# 결측치 특성과 존재 여부 확인
z <- c( 1, 2, 3, NA, 5, NA, 8 )
sum( z )
is.na( z )                     # NA 여부 확인
sum( is.na( z ) )              # NA 갯수 확인
sum( z, na.rm = TRUE )         # NA를 제외한 합계 계산
vector( is.na( z ) )
numeric( is.na( z ) )
a <- sum( is.na( z ) )
numeric( a )
is.na( z )                     # NA 여부 확인
as.numeric( is.na( z ) )
as.integer( is.na( z ) )
is.na( z )                     # NA 여부 확인
# 벡터(vector)에 대한 결측치 처리
#
# R에서는 결측치를 NA로 표기
# NA는 숫자형, 문자형, 논리형, 값 어디에나 결측치를 나타내는 용도로 사용
#
# 결측치 특성과 존재 여부 확인
z <- c( 1, 2, 3, NA, 5, NA, 8 )
# 결측치 대체 제거 및 제거
z1 <- c( 1, 2, 3, NA, NA, 8 )
z2 <- c( 5, 8, 1, NA, 3, NA, 7 )
z1[ na.rm( z1 ) ] <- 0
z1[ is.rm( z1 ) ] <- 0
z1[ is.na( z1 ) ] <- 0
z1
z2 <- c( 5, 8, 1, NA, 3, NA, 7 )
z3
z3 <- as.vector( na.omit( z2 ) )
z3
na.omit( z2 )
na.omit( z2 )
class( a )
a <- na.omit( z2 )
class( a )
#
# 매트릭스와 데이터프레임 결측치 처리
#
x <- iris
x[ 1, 2 ] <- NA
x[ 1, 3 ] <- NA
x[ 2, 3 ] <- NA
x[ 3, 4 ] <- NA
head( x )
# 데이터프레임 결측치 확인
#
# for문 이용
for ( 1 in 1:ncol( x )) {
# 데이터프레임 결측치 확인
#
# for문 이용
for ( 1 in 1:ncol( x )){
# 데이터프레임 결측치 확인
#
# for문 이용
for ( i in 1:ncol( x )) {
# 데이터프레임 결측치 확인
#
# for문 이용
for ( i in 1:ncol( x )) {
this.na <- is.na( x[ i ] ),
cat( colnames( x )[ i ], "\t", sum( this.na ), '\n'
}
#
# 매트릭스와 데이터프레임 결측치 처리
#
x <- iris
x[ 1, 2 ] <- NA
x[ 1, 3 ] <- NA
x[ 2, 3 ] <- NA
x[ 3, 4 ] <- NA
head( x )
# 데이터프레임 결측치 확인
# 데이터프레임 결측치 확인
#
# for문 이용
this.na <- is.na( x[ i ] )
# 데이터프레임 결측치 확인
#
# for문 이용
for( i in 1:ncol( x ) ) {
this.na <- is.na( x[ i ] )
cat( colnames( x )[ i ], '\t', sum( this.na ), '\n' )
}
return( sum( is.na( y ) ) )
# apply( ) 함수 이용
col_na <- function( y ) {
return( sum( is.na( y ) ) )
}
na.count <- apply( x, 2, FUN = col_na )
na.count
rm(col_na)
# apply( ) 함수 이용
col_na <- function( y ) {
return( sum( is.na( y ) ) )
}
apply( x, 2, col_na )
# data frame 행(row)의 결측치 확인
rowsum( is.na( x ) )
# data frame 행(row)의 결측치 확인
rowSums( is.na( x ) )
sum( rowSums( is.na( x ) ) > 0 )
sum( is.na( x) )
install.packages( "mice" )
