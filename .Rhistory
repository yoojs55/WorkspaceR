dim( state.x77 )
dim( iris )
str( state.x77 )
str( iris )
state.x77
nrow( state.x77 )
nrow( iris )
ncol( state.x77 )
ncol( iris )
head( state.x77 )
head( iris )
tail( state.x77 )
tail( iris )
unique( iris[ , 5 ] )  # uniqie() : 중복된 데이터를 배제하고 출력
unique( iris[ , 5 ] )  # uniqie() : 중복된 데이터를 배제하고 출력
table( iris[ , 5 ] )
table( person.info[ , 'blood.type' ] )
table( person.info[ , 'gender' ] )
#
# matrix / data frame 산술 연산 함수
#
colSums( iris[ , -5 ] ); apply( iris[ , 1:4 ], 2, sum )     # 열(row)별 합
colMeans( iris[ , -5 ] ); apply( iris[ , 1:4 ], 2, mean )   # 열(row)별 평균
rowsum( iris[ , -5 ] ); apply( iris[ , -5 ], 1, sum )       # 행(column)별 합
rowMeans( iris[ , -5 ] ); apply( iris[ , 1:4 ], 2, mean )   # 행(column)별 평균
apply( iris[ , -5 ], 2, median )                            # 열(row)별 중앙값
rowsum( iris[ , -5 ] ); apply( iris[ , -5 ], 1, sum )       # 행(column)별 합
sx <- state.x77
head( sx )
sx.t <- t( sx )
head( sx.t )
head( sx.t )
head( sx.t )
# 조건에 맞는 행(row)과 열(column) 추출( data frame만 가능 )
subset( iris, Species == 'setosa' )
subset( iris, Sepal.Length > 5.0 & Sepal.Width > 4.0 )
subset( iris, Sepal.Length > 5.0 & Sepal.Width > 4.0 )[ , c( 2, 4 ) ]
# 조건에 맞는 행(row)과 열(column) 추출( data frame만 가능 )
subset( iris, Species == 'setosa' )
colSums( iris[ , -5 ] ); apply( iris[ , 1:4 ], 2, sum )     # 열(row)별 합
colMeans( iris[ , -5 ] ); apply( iris[ , 1:4 ], 2, mean )   # 열(row)별 평균
rowsum( iris[ , -5 ] ); apply( iris[ , -5 ], 1, sum )       # 행(column)별 합
rowMeans( iris[ , -5 ] ); apply( iris[ , 1:4 ], 2, mean )   # 행(column)별 평균
apply( iris[ , -5 ], 2, median )                            # 열(row)별 중앙값
rowsum( iris[ , -5 ] ); apply( iris[ , -5 ], 1, sum )       # 행(column)별 합
rowSum( iris[ , -5 ] ); apply( iris[ , -5 ], 1, sum )       # 행(column)별 합
rowSums( iris[ , -5 ] ); apply( iris[ , -5 ], 1, sum )       # 행(column)별 합
m1
m2
m1 <- matrix( 1:20, 4, 5 )
m1
m2 <- matrix( 21:40, 4, 5 )
m2
2 * m1
m1 * 2
m2 - 5
2 * m1 + 3 * m2
m1 * 2 + m2 * 3
m1 + m2
m1 - m2
m1
m2
ads( m1 - m2 )
ads( m1 - m2 )
m1 / m2
m1 * m2
#
# matrix를 data frame으로, data frame을 matrix로 변환
#
st <- data.frame( state.x77 )
class( st )
str( st )
#
# matrix를 data frame으로, data frame을 matrix로 변환
#
st <- data.frame( state.x77 )
class( st )
str( st )
dim( st )
iris.m <- as.matrix( iris )      # data frame을 matrix로 변환
class( iris.m )
str( iris.m )
dim( iris.m )
is.matrix( state.x77 )
is.matrix( st )
is.matrix( iris.m )
is.data.frame( st )
is.data.frame( iris )
is.data.frame( iris.m )
#
# 2.5 파일 읽기 / 쓰기
#
# csv file 내용 읽어서 data frame 생성
#
air <- read.csv( 'airquality.csv', header = T )
air2 <- read.csv( 'airquality.csv' )
class( air )
class( air2 )
str( air )
str( air2 )
dim( air )
dim( air2 )
air
air2
air
air2
#
# 2.5 파일 읽기 / 쓰기
#
# csv file 내용 읽어서 data frame 생성
#
air <- read.csv( 'airquality.csv', header = F )
air2 <- read.csv( 'airquality.csv' )
air
air <- read.csv( 'airquality.csv', header = T )
air2 <- read.csv( 'airquality.csv', header = T )
class( air )
class( air2 )
str( air )
str( air2 )
dim( air )
dim( air2 )
air
air2
air <- read.csv( 'airquality.csv', header = T )
air2 <- read.csv( 'airquality.csv', header = F )
class( air )
class( air2 )
str( air )
str( air2 )
dim( air )
dim( air2 )
air
air2
air <- read.csv( 'airquality.csv', header = T )
air2 <- read.csv( 'airquality.csv', header = F )
class( air )
class( air2 )
str( air )
str( air2 )
dim( air )
dim( air2 )
air
air2
v1 <- seq(1,10,length.out = 3)
v1
v1 <- seq(1,10,length.out = 2)
v1
v1 <- seq(1,10,length.out = 5)
v1
v1 <- seq(1,10,length.out = 4)
v1
seq(1,10)
seq(1:10)
1 <- seq(1:10)
p <- seq(1:10)
rep( p, 3)
p <- seq(1:3)
rep( p, 3)
source('~/.active-rstudio-document', echo=TRUE)
rep( p, 3)
rep( p, time = 3)
rep( p, each = 3 )
rm(p)
p <- seq( 1:3 )
p <- seq( 1:10 )
p[3]
p[3,2]
p[3]
p[1:3]
p[ c(1,3,5,7,9) ]
p <- seq( 1:10 by = 2 )
p <- seq( 1:10, by = 2 )
p <- c(1,3,5)
p <- c(1,2,3)
o <- c(3,4,5)
o+p
o <- c(3,4,5,6)
o+p
o <- c(3,4,5)
p <- c(1,2,3)
o <- c(3,4,5)
# 벡터의 연산
o+p
o-p
o*p
o/p
o%%p
o+p; p+o
o-p; p-o
o*p; p*o
o/p; p/o
o%%p; p%%o
union(o,p); union(p,o)
setdiff(o,p); setdiff(p,o)
intersect(o,p): intersect(p,o)
# 집합
union(o,p); union(p,o)
setdiff(o,p); setdiff(p,o)
intersect(o,p); intersect(p,o)
p <- c(1,2,3,4)
# 행렬(=matrix / 자료형은 벡터임 / 벡터를 여러 개 합친 형태)
matrix(p)
mat <- matrix(p)  # matrix(행렬)은 defualt값은 column부터 채워짐
mat <- matrix(p)  # matrix(행렬)은 defualt값은 column부터 채워짐
mat
mat <- matrix(p, nrow = 2)
mat1 <- matrix(p, nrow = 2)
mat1
print( number1 %% number2 )
number1 <- 10
number2 <- 8
print( number1 + number2 )
print( number1 - number2 )
print( number1 * number2 )
print( number1 / number2 )
print( number1 %% number2 )
print( number1 ^ number2 )
print( number1 %% number2 )
number1 <- 10
number2 <- 8
print( number1 + number2 )
print( number1 - number2 )
print( number1 * number2 )
print( number1 / number2 )
print( number1 %% number2 )
print( number1 ^ number2 )
mat1 <- matrix(p, nrow = 2, byrow = t)
mat1 <- matrix(p, nrow = 2, byrow = T)
mat1
mat1 <- matrix(p, nrow = 2) # matrix(행렬)을 2행으로 만들어라!
mat1                        # 결과값이 2행 2열로 출력됨 (2 * 2 matrix 생성)
mat               # 결과값이 4열로 출력됨 (4 * 1 matrix 생성)
# mat1 matrix에서 3만 출력하시오.
mat1[1,2]
# mat1 matrix에서 4만 출력하시오.
mat1[2,2]
# 행 또는 열값 출력하기
mat1[1,]
# 2행의 값을 출력하시오.
mat1[2,]
# 1열의 값을 출력하시오.
mat1[,1]
# 2열의 값을 출력하시오.
mat1[,2]
mat1[,]
mat1
Price <- c(500,200,100,50)
No. <- c(1,2,3,4)
name <- c('Apple', 'Peach', 'Banana', 'Grape')
Price <- c(500,200,100,50)
Qty <- c(5,2,4,7)
salse <- data.frame(No, name, Price, Qty)
sales <- data.frame(No, name, Price, Qty)
sales <- data.frame(No., name, Price, Qty)
sales
View(sales)
View(sales)
sales[c(2)]
sales [2]
sales[2,0]
sales[2,0]sales[c(2)]
sales[2]
sales[2]
sales[0,2]
sales[0,2]
sales[2,0]
sales[2]
sales[,2]
sales[2,]
sales[2]
sales[2]
sales[2]
sales[,2]
sales[2,]
sales[0,2]
sales[2,0]
sales[c(2)]
sales$Price
sales[2,0]
sales[,2]
sales[2,]
# 문제
# 1번째 행과 2번째 행을 출력하시오.
sales[1,]; sales[2,0]
sales <- data.frame(No., name, Price, Qty)
# 문제
# 1번째 행과 2번째 행을 출력하시오.
sales[1,]; sales[2,0]
sales[1:2,]
sales[2,0]
sales[c(1,2)]
sales[1:2]
sales[c(1,2)]
sales[1:2,]
sales[2,]
# 문제
# 1번째 행과 2번째 행을 출력하시오.
sales[1,]; sales[2,]
sales[1:2,]
sales[c(1,2)]
sales[c(1,2),]
# 특정 조건에 맞는 행 추출
# subset함수 : subset(원본데이터, 조건)
subset(sales, Qty > 3)
subset(sales, name == 'Apple')
subset(sales, price >=300)
subset(sales, Price >=300)
subset(sales, name)
# 특정 조건의 열(column) 출력
subset(sales, name)
# 특정 조건의 열(column) 출력
subset(sales, Price >=100, select = name)
subset(sales, Qty >= 2, select = -Price)
# 문제
# Qty가 3개 이상인 행에서 Name과 Price만 출력하시오.
subset(sales, Qty >= 3, select = name, Price)
# 문제
# Qty가 3개 이상인 행에서 Name과 Price만 출력하시오.
subset(sales, Qty >= 3, select = name & Price)
# 문제
# Qty가 3개 이상인 행에서 Name과 Price만 출력하시오.
subset(sales, Qty >= 3, select = name, select = Price)
# 문제
# Qty가 3개 이상인 행에서 Name과 Price만 출력하시오.
subset(sales, Qty >= 3, select = c(name, Price))
## Text Mining
# KoNLP 패키지 설치
install.packages('KoNLP')
## Text Mining
# KoNLP 패키지 설치
install.packages("KoNLP")
# 문2)
# v1 <- 51:90
v1 <- 51:90
# 1. 60보다 작은 수 모두 출력
v < 60
# 1. 60보다 작은 수 모두 출력
print( v < 60 )
# 1. 60보다 작은 수 모두 출력
v[ v < 60 ]
# 1. 60보다 작은 수 모두 출력
str( v[ v < 60 ] )
v1
# 1. 60보다 작은 수 모두 출력
str( v[ v < 60 ] )
# 1. 60보다 작은 수 모두 출력
str( v[ c(v < 60) ] )
d1 <- 1:50
d2 <- 51:100
print( d1 ); d1
print( d2 ); d2
# 2. d2 길이 출력
length( d2 )
print( d1 + d2 ); d1 + d2
print( d1 - d2 ); d1 - d2
print( d1 * d2 ); d1 * d2
print( d1 / d2 ); d1 / d2
sum( d1 )
sum( d2 )
# 3. d1 + d2, d2 - d1, d1 * d2, d2 / d1의 결과 출력
print( d1 + d2 ); d1 + d2
print( d1 + d2 ); d1 + d2
# 5. d1, d2의 모든 값들의 합 출력
print( d1 + d2 )d1 + d2
# 5. d1, d2의 모든 값들의 합 출력
print( d1 + d2 )
d1 + d2
sum( d1 + d2 )
sum( d1 + d2 )
sum( d1 ) + sum( d2 )
sum( d1 )
sum( d2 )
sum( d1 + d2 )
sum( d1 ) + sum( d2 )
sum( c( d1, d2 ) )
max( d2 )
min( d2 )
abs( m_d1 + m_d2 )
m_d1 <- mean( d1 )
m_d2 <- mean( d2 )
abs( m_d1 + m_d2 )
# 8. d1 내림차순으로 정렬해서 출력
print( d1, decreasing = T )
# 8. d1 내림차순으로 정렬해서 출력
print( d1, decreasing = F )
# 8. d1 내림차순으로 정렬해서 출력
sort( d1, decreasing = F )
# 8. d1 내림차순으로 정렬해서 출력
sort( d1, decreasing = T )
sort( d1, decreasing = TRUE )
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
sort( d1, sample( d1, 10 ) )
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
sort( d1, sample( d1, 10 ) )
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
sort( d1, , sample( d1, 10 ) )
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
sort( d1 ) & sample( d1, 10 )
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
str(d1)
sort( d1, head( 1:10 ) )
sort( c( d1 )[ sample( d1, 10 ) ]
sort( c( d1 )[ sample( d1, 10 ) ]
sort( c( d1 )[ 1:10 ]
sort( c( d1 ) [ sample( d1, 10 ) ])
sort( c( d1 ) [ sample( d1, 10 ) ] )
sort( c( d1 ) [ sample( d1, 10 ) ] )
# 문2)
# v1 <- 51:90
v1 <- 51:90
sort( c( d1 ) [ sample( d1, 10 ) ], c( d2 )[sample( d1, 10)] )
sort( c( d1 ) [ sample( d1, 10 ) ], c( d2 ) [sample( d1, 10 ) ] )
# 문2)
# v1 <- 51:90
v1 <- 51:90
v1
sort( c( d1 ) [ sample( d1, 10 ) ] )
d3 <- sort( c( d1 ) [ sample( d1, 10 ) ], , c( d2 ) [ sample( d2, 10 ) ] )
d3 <- sort( c( d1 ) [ sample( d1, 10 ) ], c( d2 ) [ sample( d2, 10 ) ] )
d3 <- sort( c( d1 ) [ sample( d1, 10 ) ], c( d2 ) [ sample( d2, 10 ) ] )
sort( c( d1 ) [ sample( d1, 10 ) ], c( d2 ) [ sample( d2, 10 ) ] )
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
d3 <- sort( c( d1 )[ 1:10 ], c( d2 )[ 1:10] )
sort( c( d1 )[ 1:10 ], c( d2 )[ 1:10] )
#9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
d3 <- c( sort( d1 )[ 1:10 ], sort( d2 )[ 1:10 ] )
d3
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
d3 <- c( sort( d1 )[ 1:10 ], sort( d2 )[ 1:10 ] )
d3
d3 <- c( sort( d1 )[ head( 1:10 ) ], c( sort( d2 )[ head(1:10) ] ) )
d3 <- c( sort( d1 )[ head( 1:10 ) ], c( sort( d2 )[ head(1:10) ] ) )
d3
d3 <- c( sort( d1 )[ head( d1, 10 ) ], c( sort( d2 )[ head( d2, 10) ] ) )
d3
d1 <- 1:50
d2 <- 51:100
d3 <- c( sort( d1 )[ head( d1, 10 ) ], c( sort( d2 )[ head( d2, 10) ] ) )
d3
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
d3 <- c( sort( d1 )[ 1:10 ], sort( d2 )[ 1:10 ] )
d3
sort( c( d1 ) [ sample( d1, 10 ) ] )
d3 <- c( sort( d1 )[ head( d1, 10 ) ], sort( d2 )[ head( d2, 10) ] )
d3
d3 <- c( sort( d1, d2 )[ head( d1, d2, 10 ) ] )
d3 <- c( sort( d1:d2 )[ head( d1:d2, 10 ) ] )
d3 <- c( sort( d1 )[ head( d1, 10 ) ], sort( d2 )[ head( d2, 10) ] )
d3
d3 <- c( sort( d1 ) [ head( d1, 10 ) ], sort( d2 ) [ head( d2, 10) ] )
d3
d3 <- c( sort( d1 )[ sample( d1, 10 ) ], sort( d2 )[sample( d2, 10 ) ] )
d3
result( c( s1, s2 ) )
s1 <- c( sort( d1 ) )
s2 <- c( sort( d2 ) )
result( c( s1  [ head( d1, 10 ) ] , s2  [ head( d2, 10) ] ) )
s1 <- c( sort( d1 ) [ head( d1, 10 ) ] )
s2 <- c( sort( d2 ) [ head( d2, 10) ] )
result <- c( s1, s2 )
s1 <- c( sort( d1 ) [ head( d1, 10 ) ] )
s2 <- c( sort( d2 ) [ head( d2, 10 ) ] )
result <- c( s1, s2 )
result
s2 <- c( sort( d2 ) [ head( d2, 10 ) ] )
s2
s1
head( d2, 10 )
sort( d2 )
s2 <- c( sort( d2 ) [ head( d2, 10 ) ] )
s2
s1
result <- c( s1, s2 )
result
d3 <- c( sort( d1 )[ sample( d1, 10 ) ], sort( d2 )[sample( d2, 10 ) ] )
d3
sort( c( d1 ) [ sample( d1, 10 ) ] )
sort( c( d2 ) [ sample( d2, 10 ) ] )
sort( c( d2 ) [ sample( d2, 10 ) ] )
d3 <- c( sort( d1 )[ sample( d1, 10 ) ], sort( d2 )[sample( d2, n=10 ) ] )
d3 <- c( sort( d1 )[ sample( d1, 10 ) ], sort( d2 )[sample( d2, n=10 ) ] )
sort( c( d2 ) [ sample( d2, 10 ) ] )
sort( c( d1 ) [ sample( d1, 10 ) ] )
sort( c( d1 ) [ sample( d1, 10 ) ] )
sort( c( d1 ) [ sample( d1, 10 ) ] )
sort( c( d1 ) [ sample( d1, 10 ) ] )
sort( c( d2 ) [ sample( d2, 10 ) ] )
50
d2 <- 51 : 1
d2 <- 51 : 100
# d1 <- 1:50
# d2 <- 51:100
d1 <- 1 : 50
# 1. d1, d2값 출력
print( d1 ); d1
print( d2 ); d2
# 9. d1, d2  오름차순으로 정렬 후 각 10개씩을 추출하여 d3에 저장
d3 <- c( sort( d1 )[ 1:10 ], sort( d2 )[ 1:10 ] )
d3
sort( c( d1 ) [ sample( d1, 10 ) ] )
sort( c( d2 ) [ sample( d2, 10 ) ] )
d3 <- c( sort( d1 )[ sample( d1, 10 ) ] )
d3 <- c( sort( d2 )[ sample( d2, 10 ) ] )
d3
d3
d3 <- c( sort( d1 )[ sample( d1, 10 ) ] )
d3
d3 <- c( sort( d2 )[ sample( d2, 10 ) ] )
d3
result <- c( s1[ 1:10 ], s2[ 1:10 ] )
result
